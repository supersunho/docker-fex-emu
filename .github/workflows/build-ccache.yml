name: Build ccache Binary

on:
    # Automatic execution every Sunday (check for latest ccache)
    schedule:
        - cron: "0 0 * * 0"
    # Manual execution available
    workflow_dispatch:
        inputs:
            force_rebuild:
                description: "Force rebuild even if artifacts exist"
                required: false
                default: "false"
                type: boolean
    # Also execute when workflow file changes
    push:
        paths:
            - ".github/workflows/build-ccache.yml"

env:
    # Environment variables required for ccache build
    CMAKE_BUILD_TYPE: Release
    CMAKE_GENERATOR: Ninja

jobs:
    detect-version:
        name: Detect Latest ccache Version
        runs-on: ubuntu-latest
        outputs:
            ccache-version: ${{ steps.get-version.outputs.version }}
            should-build: ${{ steps.check-cache.outputs.should-build }}
            artifacts-exist: ${{ steps.check-cache.outputs.artifacts-exist }}

        steps:
            - name: Get latest ccache version
              id: get-version
              run: |
                  echo "üîç Detecting latest ccache version..."
                  LATEST_VERSION=$(curl -s https://api.github.com/repos/ccache/ccache/releases/latest | \
                                   grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/^v//')
                  echo "üìä Latest ccache version: ${LATEST_VERSION}"
                  echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

            - name: Check if artifacts already exist
              id: check-cache
              run: |
                  VERSION="${{ steps.get-version.outputs.version }}"
                  echo "üîç Checking for existing ccache ${VERSION} artifacts..."

                  # Check if artifacts exist for this version via GitHub API
                  REPO="${{ github.repository }}"
                  TOKEN="${{ secrets.GITHUB_TOKEN }}"

                  # Get recent workflow runs for this workflow
                  RUNS_RESPONSE=$(curl -s -H "Authorization: token ${TOKEN}" \
                    "https://api.github.com/repos/${REPO}/actions/workflows/build-ccache.yml/runs?status=success&per_page=10")

                  # Check if any successful run has artifacts for this version
                  ARTIFACTS_EXIST=false
                  for run_id in $(echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[].id'); do
                    ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token ${TOKEN}" \
                      "https://api.github.com/repos/${REPO}/actions/runs/${run_id}/artifacts")
                    
                    ARM64_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r --arg version "$VERSION" \
                      '.artifacts[] | select(.name == "ccache-\($version)-arm64") | .name')
                    AMD64_ARTIFACT=$(echo "$ARTIFACTS_RESPONSE" | jq -r --arg version "$VERSION" \
                      '.artifacts[] | select(.name == "ccache-\($version)-amd64") | .name')
                    
                    if [ "$ARM64_ARTIFACT" != "null" ] && [ "$AMD64_ARTIFACT" != "null" ] && \
                       [ -n "$ARM64_ARTIFACT" ] && [ -n "$AMD64_ARTIFACT" ]; then
                      echo "‚úÖ Found existing artifacts for ccache ${VERSION}"
                      ARTIFACTS_EXIST=true
                      break
                    fi
                  done

                  # Determine if we should build
                  FORCE_REBUILD="${{ github.event.inputs.force_rebuild }}"
                  if [ "$ARTIFACTS_EXIST" = "true" ] && [ "$FORCE_REBUILD" != "true" ]; then
                    echo "should-build=false" >> $GITHUB_OUTPUT
                    echo "‚è≠Ô∏è Skipping build - artifacts already exist for ccache ${VERSION}"
                  else
                    echo "should-build=true" >> $GITHUB_OUTPUT
                    if [ "$ARTIFACTS_EXIST" = "true" ]; then
                      echo "üîÑ Force rebuild requested for ccache ${VERSION}"
                    else
                      echo "üî® Will build ccache ${VERSION} (artifacts not found)"
                    fi
                  fi

                  echo "artifacts-exist=${ARTIFACTS_EXIST}" >> $GITHUB_OUTPUT

    build-ccache:
        name: Build ccache ${{ needs.detect-version.outputs.ccache-version }} for ${{ matrix.arch }}
        runs-on: ubuntu-latest
        needs: detect-version
        if: needs.detect-version.outputs.should-build == 'true'

        strategy:
            matrix:
                arch: [arm64, amd64]
                include:
                    - arch: arm64
                      target-arch: aarch64-linux-gnu
                      cmake-arch: aarch64
                    - arch: amd64
                      target-arch: x86_64-linux-gnu
                      cmake-arch: x86_64

        steps:
            - name: Set up build environment
              run: |
                  echo "üîß Setting up build environment for ${{ matrix.arch }}..."
                  sudo apt-get update -qq
                  sudo apt-get install -y --no-install-recommends \
                    build-essential cmake ninja-build \
                    libzstd-dev libhiredis-dev \
                    xz-utils curl wget jq \
                    gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                  echo "‚úÖ Build environment ready"

            - name: Download ccache source
              run: |
                  VERSION="${{ needs.detect-version.outputs.ccache-version }}"
                  echo "üì• Downloading ccache ${VERSION} source..."

                  SOURCE_URL="https://github.com/ccache/ccache/releases/download/v${VERSION}/ccache-${VERSION}.tar.xz"
                  echo "üìç Download URL: ${SOURCE_URL}"

                  wget -q "${SOURCE_URL}"
                  tar -xf "ccache-${VERSION}.tar.xz"

                  echo "‚úÖ Source downloaded and extracted"
                  ls -la "ccache-${VERSION}/"

            - name: Configure ccache build
              run: |
                  VERSION="${{ needs.detect-version.outputs.ccache-version }}"
                  cd "ccache-${VERSION}"
                  mkdir -p build && cd build

                  echo "‚öôÔ∏è Configuring cmake for ${{ matrix.arch }}..."

                  if [ "${{ matrix.arch }}" = "arm64" ]; then
                    # ARM64 cross-compilation configuration
                    cmake \
                      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
                      -DCMAKE_INSTALL_PREFIX=/usr/local \
                      -DCMAKE_SYSTEM_NAME=Linux \
                      -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                      -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
                      -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
                      -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                      -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
                      -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                      -G Ninja ..
                  else
                    # AMD64 native build
                    cmake \
                      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
                      -DCMAKE_INSTALL_PREFIX=/usr/local \
                      -G Ninja ..
                  fi

                  echo "‚úÖ CMake configuration completed"

            - name: Build ccache
              run: |
                  VERSION="${{ needs.detect-version.outputs.ccache-version }}"
                  cd "ccache-${VERSION}/build"

                  echo "üî® Building ccache for ${{ matrix.arch }}..."
                  ninja -j$(nproc)

                  echo "üì¶ Installing to temporary directory..."
                  DESTDIR=/tmp/ccache-install ninja install

                  echo "‚úÖ Build completed successfully"

                  # Verify built binary
                  file /tmp/ccache-install/usr/local/bin/ccache
                  /tmp/ccache-install/usr/local/bin/ccache --version || echo "Cross-compiled binary, cannot execute"

            - name: Package ccache binary
              run: |
                  VERSION="${{ needs.detect-version.outputs.ccache-version }}"
                  echo "üì¶ Packaging ccache binary for ${{ matrix.arch }}..."

                  cd /tmp/ccache-install

                  # Verify installation structure
                  echo "üîç Checking installation structure:"
                  find usr/ -type f -name "*ccache*" | head -10

                  # Start with essential binary
                  PACKAGE_FILES="usr/local/bin/ccache"

                  # Add man pages if they exist
                  if find usr/local/share/man -name "ccache.1*" -type f | grep -q .; then
                      echo "‚úÖ Man pages found, including in package"
                      MAN_FILES=$(find usr/local/share/man -name "ccache.1*" -type f)
                      PACKAGE_FILES="$PACKAGE_FILES $MAN_FILES"
                  else
                      echo "‚ö†Ô∏è Man pages not found, packaging binary only"
                  fi

                  # Create package with verified files
                  tar -czf "/tmp/ccache-${VERSION}-linux-${{ matrix.arch }}.tar.gz" $PACKAGE_FILES

                  echo "üìä Package contents:"
                  tar -tzf "/tmp/ccache-${VERSION}-linux-${{ matrix.arch }}.tar.gz"

                  echo "üìä Package information:"
                  ls -lh "/tmp/ccache-${VERSION}-linux-${{ matrix.arch }}.tar.gz"

                  echo "‚úÖ Packaging completed successfully"

            - name: Upload versioned ccache binary artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ccache-${{ needs.detect-version.outputs.ccache-version }}-${{ matrix.arch }}
                  path: /tmp/ccache-*.tar.gz
                  retention-days: 90
                  compression-level: 9

            - name: Build summary
              run: |
                  VERSION="${{ needs.detect-version.outputs.ccache-version }}"
                  echo "## üéâ ccache ${VERSION} Build Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **Architecture**: ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Package**: ccache-${VERSION}-linux-${{ matrix.arch }}.tar.gz" >> $GITHUB_STEP_SUMMARY
                  echo "- **Status**: ‚úÖ Successfully built and uploaded" >> $GITHUB_STEP_SUMMARY

    create-release:
        name: Create Release Summary
        runs-on: ubuntu-latest
        needs: [detect-version, build-ccache]
        if: always() && (needs.build-ccache.result == 'success' || needs.detect-version.outputs.artifacts-exist == 'true')

        steps:
            - name: Download all artifacts (if built)
              if: needs.build-ccache.result == 'success'
              uses: actions/download-artifact@v4
              with:
                  pattern: ccache-${{ needs.detect-version.outputs.ccache-version }}-*
                  path: ./artifacts
                  merge-multiple: true

            - name: Create release summary
              run: |
                  VERSION="${{ needs.detect-version.outputs.ccache-version }}"
                  ARTIFACTS_EXIST="${{ needs.detect-version.outputs.artifacts-exist }}"
                  BUILD_RESULT="${{ needs.build-ccache.result }}"

                  echo "## üöÄ ccache ${VERSION} Build Results" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "$BUILD_RESULT" = "success" ]; then
                    echo "‚úÖ **Status**: New build completed successfully" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "Built ccache binaries for multiple architectures:" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    
                    echo "| Architecture | Artifact Name | Size |" >> $GITHUB_STEP_SUMMARY
                    echo "|--------------|---------------|------|" >> $GITHUB_STEP_SUMMARY
                    
                    for file in ./artifacts/*.tar.gz; do
                      if [ -f "$file" ]; then
                        basename_file=$(basename "$file")
                        arch=$(echo "$basename_file" | sed -n 's/.*-linux-\([^.]*\)\.tar\.gz/\1/p')
                        size=$(ls -lh "$file" | awk '{print $5}')
                        echo "| $arch | $basename_file | $size |" >> $GITHUB_STEP_SUMMARY
                      fi
                    done
                  elif [ "$ARTIFACTS_EXIST" = "true" ]; then
                    echo "‚è≠Ô∏è **Status**: Skipped (artifacts already exist)" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "ccache ${VERSION} binaries are already available in artifacts." >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üì• Usage in Main Workflow" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo '```
                  echo '- name: Download specific ccache version' >> $GITHUB_STEP_SUMMARY
                  echo '  uses: actions/download-artifact@v4' >> $GITHUB_STEP_SUMMARY
                  echo '  with:' >> $GITHUB_STEP_SUMMARY
                  echo "    name: ccache-${VERSION}-arm64" >> $GITHUB_STEP_SUMMARY
                  echo '    path: ./ccache-binary' >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
