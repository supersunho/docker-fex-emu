name: Auto-detect RootFS Updates

on:
    schedule:
        - cron: "0 6,18 * * *"
    workflow_dispatch:
        inputs:
            force_check:
                description: "Force check for RootFS updates"
                required: false
                default: false
                type: boolean
            skip_build:
                description: "Skip automatic build trigger"
                required: false
                default: false
                type: boolean

jobs:
    check-rootfs-updates:
        runs-on: ubuntu-latest
        outputs:
            rootfs_changed: ${{ steps.compare_rootfs.outputs.rootfs_changed }}
            force_triggered: ${{ steps.compare_rootfs.outputs.force_triggered }}

        steps:
            - name: Download previous RootFS data
              uses: dawidd6/action-download-artifact@v2
              with:
                  name: rootfs-data-snapshot
                  if_no_artifact_found: warn

            - name: Fetch current RootFS data
              id: fetch_rootfs
              run: |
                  echo "üîç Fetching current RootFS data..."
                  curl -s https://rootfs.fex-emu.gg/RootFS_links.json > current_rootfs.json
                  CURRENT_HASH=$(sha256sum current_rootfs.json | cut -d' ' -f1)
                  echo "current_hash=$CURRENT_HASH" >> $GITHUB_OUTPUT

            - name: Compare with previous data (with force_check logic)
              id: compare_rootfs
              run: |
                  echo "üîç Checking RootFS status with force_check logic..."

                  PREVIOUS_HASH=$(cat rootfs_hash 2>/dev/null || echo "NONE")
                  CURRENT_HASH="${{ steps.fetch_rootfs.outputs.current_hash }}"
                  FORCE_CHECK="${{ github.event.inputs.force_check }}"

                  echo "üìä RootFS comparison:"
                  echo "  - Previous hash: $PREVIOUS_HASH"
                  echo "  - Current hash: $CURRENT_HASH"
                  echo "  - Force check: $FORCE_CHECK"

                  if [ "$FORCE_CHECK" = "true" ]; then
                    echo "üîÑ Force check enabled - will trigger build regardless"
                    echo "rootfs_changed=true" >> $GITHUB_OUTPUT
                    echo "force_triggered=true" >> $GITHUB_OUTPUT
                    echo "trigger_reason=force_check_rootfs" >> $GITHUB_OUTPUT
                  elif [ "$CURRENT_HASH" != "$PREVIOUS_HASH" ]; then
                    echo "üÜï RootFS data has changed!"
                    echo "rootfs_changed=true" >> $GITHUB_OUTPUT
                    echo "force_triggered=false" >> $GITHUB_OUTPUT
                    echo "trigger_reason=rootfs_data_changed" >> $GITHUB_OUTPUT
                    
                    # Analyze changes
                    if [ -f "previous_rootfs.json" ]; then
                      echo "üîç Analyzing changes..."
                      diff previous_rootfs.json current_rootfs.json > rootfs_changes.txt || true
                    fi
                  else
                    echo "‚úÖ No changes in RootFS data and force check not enabled"
                    echo "rootfs_changed=false" >> $GITHUB_OUTPUT
                    echo "force_triggered=false" >> $GITHUB_OUTPUT
                    echo "trigger_reason=no_change" >> $GITHUB_OUTPUT
                  fi

            - name: Save current data
              run: |
                  echo "${{ steps.fetch_rootfs.outputs.current_hash }}" > rootfs_hash
                  cp current_rootfs.json previous_rootfs.json

            - name: Upload RootFS data snapshot
              uses: actions/upload-artifact@v4
              with:
                  name: rootfs-data-snapshot
                  path: |
                      rootfs_hash
                      previous_rootfs.json
                      rootfs_changes.txt
                  retention-days: 30

    trigger-selective-rebuild:
        needs: check-rootfs-updates
        if: needs.check-rootfs-updates.outputs.rootfs_changed == 'true' && github.event.inputs.skip_build != 'true'
        runs-on: ubuntu-latest

        steps:
            - name: Determine build scope for RootFS changes
              id: build_scope
              run: |
                  FORCE_TRIGGERED="${{ needs.check-rootfs-updates.outputs.force_triggered }}"

                  if [ "$FORCE_TRIGGERED" = "true" ]; then
                    echo "üîÑ Force triggered - rebuilding all images"
                    echo "build_scope=full-matrix" >> $GITHUB_OUTPUT
                  else
                    echo "üéØ RootFS changed - selective rebuild"
                    echo "build_scope=latest-only" >> $GITHUB_OUTPUT
                  fi

            - name: Create GitHub issue for RootFS update
              uses: actions/github-script@v7
              with:
                  script: |
                      const forceTriggered = '${{ needs.check-rootfs-updates.outputs.force_triggered }}';
                      const buildScope = '${{ steps.build_scope.outputs.build_scope }}';
                      const triggerType = forceTriggered === 'true' ? 'Manual Force Check' : 'RootFS Data Changed';

                      const issueBody = `
                      ## üîÑ RootFS Update Processing

                      **Update Type**: ${triggerType}
                      **Build Scope**: \`${buildScope}\`
                      **Detection Time**: ${new Date().toISOString()}
                      **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

                      ### üìã Automated Actions Taken:
                      - ‚úÖ RootFS changes detected
                      - ‚úÖ Container rebuild workflow triggered
                      - ‚úÖ Build scope: ${buildScope}

                      ### üéØ Expected Updates:
                      - [ ] Affected RootFS images rebuilt
                      - [ ] Updated Docker Hub deployments
                      - [ ] Registry manifest updates

                      ### üîç Build Progress:
                      Monitor the [build workflow](${{ github.server_url }}/${{ github.repository }}/actions) for real-time progress.

                      ---
                      *This issue was automatically created by the RootFS update detection system* ü§ñ
                      `;

                      await github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: `üîÑ RootFS Update Detected - Auto-Rebuild Triggered`,
                        body: issueBody,
                        labels: [
                          'automation', 
                          'rootfs-update', 
                          'build-trigger',
                          forceTriggered === 'true' ? 'manual-trigger' : 'auto-detected'
                        ]
                      });

            - name: Trigger selective rebuild
              uses: benc-uk/workflow-dispatch@v1
              with:
                  workflow: builder.yml
                  inputs: |
                      {
                        "build_scope": "${{ steps.build_scope.outputs.build_scope }}",
                        "version": "latest", 
                        "force_rebuild": "true",
                        "trigger_reason": "rootfs_update"
                      }
