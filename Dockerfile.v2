ARG BASE_IMAGE=ubuntu:24.04

#==============================================
# Build Stage - Ubuntu & Fedora Support with Debug
#==============================================
FROM ${BASE_IMAGE} AS fex-builder

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG LLVM_VERSION=18
ARG CCACHE_DIR=/tmp/.ccache
ARG ENABLE_CCACHE=false

# Set environment variables for non-interactive installation and ccache
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul
ENV CCACHE_DIR=${CCACHE_DIR}
ENV ENABLE_CCACHE=${ENABLE_CCACHE}

# Detect OS type with debugging
RUN echo "🔍 Starting OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "🐧 Detected: Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "🐧 Detected: Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "❌ Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "✅ OS detection completed"

# Install build dependencies with detailed debugging
RUN echo "📦 Starting package installation..." && \
    . /etc/distro-info && \
    echo "🔍 Distribution type: $(cat /etc/distro-info)" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "🔧 Setting up Debian/Ubuntu environment..." && \
        apt-get update -qq && \
        echo "📦 Installing base development packages..." && \
        apt-get install -qq -y --no-install-recommends \
            git cmake ninja-build pkg-config ccache \
            nasm python3-dev python3-clang python3-setuptools \
            libcap-dev libglfw3-dev libepoxy-dev libsdl2-dev \
            linux-headers-generic curl wget \
            software-properties-common openssl libssl-dev \
            gnupg gnupg2 gpg-agent dirmngr ca-certificates && \
        echo "✅ Base packages installed successfully" && \
        \
        # LLVM installation with debugging
        if [ "${ROOTFS_OS}" = "ubuntu" ]; then \
            echo "🔍 Processing Ubuntu-specific configuration..." && \
            UBUNTU_VERSION_NUM=$(echo "${ROOTFS_VERSION}" | sed 's/\.//') && \
            echo "📊 ROOTFS_VERSION: ${ROOTFS_VERSION}" && \
            echo "📊 UBUNTU_VERSION_NUM: ${UBUNTU_VERSION_NUM}" && \
            echo "🧪 Testing version comparison: [ ${UBUNTU_VERSION_NUM} -ge 2404 ]" && \
            if [ "${UBUNTU_VERSION_NUM}" -ge "2404" ]; then \
                echo "✅ Ubuntu 24.04+ detected - using repository LLVM" && \
                apt-get install -qq -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION} && \
                echo "✅ LLVM ${LLVM_VERSION} installed from repository"; \
            else \
                echo "🔧 Ubuntu <24.04 detected - using LLVM script" && \
                echo "🔑 Configuring GPG environment..." && \
                gpgconf --kill gpg-agent 2>/dev/null || true && \
                echo "📥 Adding ubuntu-toolchain-r PPA securely..." && \
                \
                # Stage 1: Try default keyserver
                if curl -fsSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2C277A0A352154E5" | \
                gpg --dearmor -o /etc/apt/trusted.gpg.d/ubuntu-toolchain-r.gpg 2>/dev/null; then \
                    echo "✅ GPG key added via keyserver.ubuntu.com"; \
                # Stage 2: Try alternative keyserver
                elif curl -fsSL "https://pgp.mit.edu/pks/lookup?op=get&search=0x2C277A0A352154E5" | \
                    gpg --dearmor -o /etc/apt/trusted.gpg.d/ubuntu-toolchain-r.gpg 2>/dev/null; then \
                    echo "✅ GPG key added via pgp.mit.edu"; \
                # Stage 3: Use Ubuntu official keyring
                elif apt-get install -qq -y ubuntu-keyring 2>/dev/null && \
                    cp /usr/share/keyrings/ubuntu-archive-keyring.gpg /etc/apt/trusted.gpg.d/ubuntu-toolchain-r.gpg; then \
                    echo "✅ Using Ubuntu official keyring"; \
                # Stage 4: Direct add-apt-repository usage (automatic GPG handling)
                else \
                    echo "⚠️ Falling back to add-apt-repository" && \
                    add-apt-repository ppa:ubuntu-toolchain-r/test -y; \
                fi && \
                \
                # Manual PPA repository addition (independent of key issues)
                echo "deb https://ppa.launchpadcontent.net/ubuntu-toolchain-r/test/ubuntu focal main" > \
                /etc/apt/sources.list.d/ubuntu-toolchain-r.list && \
                echo "📦 Updating package lists..." && \
                apt-get update -qq > /dev/null 2>&1 && \
                apt-get install --only-upgrade libstdc++6 -y -qq > /dev/null 2>&1 && \
                echo "✅ Ubuntu toolchain PPA configured successfully" && \
                echo "📥 Downloading LLVM installation script..." && \
                wget https://apt.llvm.org/llvm.sh && \
                chmod +x llvm.sh && \
                echo "🔧 Installing LLVM ${LLVM_VERSION} via script..." && \
                ./llvm.sh ${LLVM_VERSION} > /dev/null 2>&1 && \
                rm llvm.sh && \
                echo "✅ LLVM ${LLVM_VERSION} installed via script"; \
            fi && \
            \
            # Qt installation for Ubuntu 20.04 compatibility (fixed version)
            if [ "${UBUNTU_VERSION_NUM}" -eq "2004" ]; then \
                echo "🎨 Installing Qt 5.15 for Ubuntu 20.04 compatibility" && \
                # Stage 1: Try Qt 5.15.0 PPA
                if add-apt-repository ppa:beineri/opt-qt-5.15.0-focal -y && \
                apt-get update -qq > /dev/null 2>&1 && \
                apt-get install -qq -y qt515base qt515declarative qt515tools > /dev/null 2>&1; then \
                    echo "✅ Qt 5.15 installed from PPA" && \
                    echo 'source /opt/qt515/bin/qt515-env.sh' >> ~/.bashrc; \
                # Stage 2: Fallback to default Qt
                else \
                    echo "⚠️ Qt 5.15 PPA failed, using default Qt" && \
                    apt-get install -qq -y qtbase5-dev qtdeclarative5-dev qt5-default > /dev/null 2>&1 && \
                    echo "✅ Default Qt 5.12 installed as fallback"; \
                fi; \
            else \
                echo "📦 Installing default Qt packages for Ubuntu ${ROOTFS_VERSION}" && \
                apt-get install -qq -y qtbase5-dev qtdeclarative5-dev > /dev/null 2>&1 && \
                echo "✅ Default Qt packages installed"; \
            fi; \
        else \
            echo "🔧 Processing non-Ubuntu Debian distribution..." && \
            apt-get install -qq -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION} || \
            (echo "📥 Falling back to LLVM script..." && \
             wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh ${LLVM_VERSION} && rm llvm.sh) && \
            apt-get install -qq -y qtbase5-dev qtdeclarative5-dev && \
            echo "✅ Packages installed for Debian distribution"; \
        fi && \
        \
        # Cleanup with status
        echo "🧹 Creating symlinks and cleaning up..." && \
        update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${LLVM_VERSION} 100 && \
        apt-get autoremove -qq -y && \
        apt-get autoclean -qq && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* && \
        echo "✅ Debian/Ubuntu setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "🔧 Setting up Fedora environment..." && \
        dnf update -q -y && \
        echo "🔍 Checking LLVM availability..." && \
        if dnf list available llvm${LLVM_VERSION} 2>/dev/null | grep -q llvm${LLVM_VERSION}; then \
            echo "✅ LLVM ${LLVM_VERSION} available in Fedora repositories" && \
            dnf install -q -y \
                @development-tools cmake ninja-build pkg-config ccache \
                llvm${LLVM_VERSION} clang${LLVM_VERSION} lld${LLVM_VERSION} \
                compiler-rt${LLVM_VERSION} libomp${LLVM_VERSION} \
                libstdc++-devel libstdc++-static glibc-devel \
                gcc-c++ binutils-devel; \
        else \
            echo "⚠️ LLVM ${LLVM_VERSION} not available, using default" && \
            dnf install -q -y \
                @development-tools cmake ninja-build pkg-config ccache \
                llvm llvm-devel clang clang-devel lld \
                libstdc++-devel libstdc++-static glibc-devel \
                gcc-c++ binutils-devel; \
        fi && \
        echo "🔗 Creating tool symlinks..." && \
        for tool in ar nm objdump strip; do \
            if [ -f "/usr/bin/llvm-$tool" ] && [ ! -f "/usr/bin/llvm-$tool-${LLVM_VERSION}" ]; then \
                ln -sf "/usr/bin/llvm-$tool" "/usr/bin/llvm-$tool-${LLVM_VERSION}"; \
            fi; \
        done && \
        echo "📦 Installing additional Fedora packages..." && \
        dnf install -q -y \
            nasm python3-clang python3-setuptools openssl-devel \
            libcap-devel glfw-devel libepoxy-devel SDL2-devel \
            qt5-qtdeclarative-devel qt5-qtquickcontrols qt5-qtquickcontrols2 \
            curl wget && \
        dnf clean all -q && \
        echo "✅ Fedora setup completed successfully"; \
    else \
        echo "❌ Unsupported distribution type" && exit 1; \
    fi && \
    echo "🎉 All package installation completed!"

# Install prebuilt ccache from artifact with fallback
RUN echo "📦 Setting up ccache from artifact with fallback..." && \
    # Check if prebuilt ccache artifact is available
    if [ -d "/ccache-binary" ] && ls /ccache-binary/ccache-*.tar.gz >/dev/null 2>&1; then \
        echo "✅ Prebuilt ccache artifact found, installing..." && \
        tar -xzf /ccache-binary/ccache-*.tar.gz -C / && \
        chmod +x /usr/local/bin/ccache && \
        echo "📊 Prebuilt ccache version installed:" && \
        /usr/local/bin/ccache --version && \
        echo "CCACHE_SOURCE=prebuilt" > /tmp/ccache-info; \
    else \
        echo "⚠️ Prebuilt ccache not available, using system ccache" && \
        echo "📊 System ccache version:" && \
        ccache --version && \
        echo "CCACHE_SOURCE=system" > /tmp/ccache-info; \
    fi && \
    echo "✅ ccache setup completed"

# Copy ccache binary from build context (conditional)
COPY --from=ccache-binary . /ccache-binary

# Copy FEX source and build with comprehensive debugging
COPY --from=fex-sources / /tmp/fex-source  
RUN --mount=type=cache,target=/tmp/.ccache \
    echo "🏗️ Starting FEX build process..." && \
    cd /tmp/fex-source && \
    echo "🔧 Applying Qt compatibility fixes for Ubuntu 20.04..." && \
    # Method 1: Replace qt_add_resources with qt5_add_resources
    find . -name "CMakeLists.txt" -exec sed -i 's/qt_add_resources(/qt5_add_resources(/g' {} + && \
    echo "✅ Qt command compatibility fixed" && \
    \
    # Method 2: Set Qt 5.15 environment for CMake
    if [ "${UBUNTU_VERSION_NUM:-}" -eq "2004" ]; then \
        source /opt/qt515/bin/qt515-env.sh 2>/dev/null || true && \
        export CMAKE_PREFIX_PATH="/opt/qt515:$CMAKE_PREFIX_PATH" && \
        export Qt5_DIR="/opt/qt515/lib/cmake/Qt5" && \
        echo "✅ Qt 5.15 environment configured for CMake"; \
    fi && \
    \
    # Check ccache source and setup
    . /tmp/ccache-info && \
    echo "📊 Build environment summary:" && \
    echo "  - ENABLE_CCACHE: ${ENABLE_CCACHE}" && \
    echo "  - CCACHE_DIR: ${CCACHE_DIR}" && \
    echo "  - CCACHE_SOURCE: ${CCACHE_SOURCE}" && \
    echo "  - LLVM_VERSION: ${LLVM_VERSION}" && \
    \
    mkdir -p Build && cd Build && \
    # Configure ccache environment
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "🚀 Configuring ccache acceleration..." && \
        mkdir -p /tmp/ccache-temp && \
        export CCACHE_BASEDIR=/tmp/fex-source && \
        export CCACHE_TEMPDIR=/tmp/ccache-temp && \
        export CCACHE_DIR=/tmp/.ccache && \
        export CCACHE_MAXSIZE=2G && \
        export CCACHE_COMPRESS=1 && \
        export CCACHE_SLOPPINESS=pch_defines,time_macros && \
        # Use appropriate ccache binary
        if [ "$CCACHE_SOURCE" = "prebuilt" ]; then \
            echo "📦 Using prebuilt ccache binary" && \
            /usr/local/bin/ccache --zero-stats; \
        else \
            echo "🔄 Using system ccache" && \
            ccache --zero-stats; \
        fi && \
        echo "✅ ccache enabled with directory: $CCACHE_DIR"; \
    else \
        echo "ℹ️ ccache disabled for this build"; \
    fi && \
    \
    # Detect and configure compiler
    echo "🔍 Detecting compilers..." && \
    if command -v clang-${LLVM_VERSION} >/dev/null 2>&1; then \
        CC_COMPILER=clang-${LLVM_VERSION}; \
        CXX_COMPILER=clang++-${LLVM_VERSION}; \
        echo "✅ Using versioned compilers: $CC_COMPILER / $CXX_COMPILER"; \
    else \
        CC_COMPILER=clang; \
        CXX_COMPILER=clang++; \
        echo "⚠️ Using default compilers: $CC_COMPILER / $CXX_COMPILER"; \
    fi && \
    \
    # Configure OS-specific linker flags
    echo "🔗 Configuring linker flags..." && \
    . /etc/distro-info && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        LINKER_FLAGS="-static-libstdc++ -static-libgcc"; \
        echo "📋 Debian linker flags: $LINKER_FLAGS"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        LINKER_FLAGS="-static-libstdc++ -static-libgcc -Wl,--as-needed"; \
        echo "📋 Fedora linker flags: $LINKER_FLAGS"; \
    fi && \
    \
    # Build FEX with conditional ccache
    echo "⚙️ Running CMake configuration..." && \
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "🚀 Building with ccache acceleration (${CCACHE_SOURCE})..." && \
        # Set ccache launcher based on source
        if [ "$CCACHE_SOURCE" = "prebuilt" ]; then \
            CCACHE_LAUNCHER="/usr/local/bin/ccache"; \
        else \
            CCACHE_LAUNCHER="ccache"; \
        fi && \
        cmake \
            -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_LINKER=lld \
            -DENABLE_LTO=True \
            -DBUILD_TESTS=False \
            -DENABLE_ASSERTIONS=False \
            -DCMAKE_C_COMPILER=$CC_COMPILER \
            -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
            -DCMAKE_C_COMPILER_LAUNCHER=$CCACHE_LAUNCHER \
            -DCMAKE_CXX_COMPILER_LAUNCHER=$CCACHE_LAUNCHER \
            -DCMAKE_EXE_LINKER_FLAGS="$LINKER_FLAGS" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINKER_FLAGS" \
            -G Ninja ..; \
    else \
        echo "🔨 Building without ccache..." && \
        CC=$CC_COMPILER CXX=$CXX_COMPILER cmake \
            -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_LINKER=lld \
            -DENABLE_LTO=True \
            -DBUILD_TESTS=False \
            -DENABLE_ASSERTIONS=False \
            -DCMAKE_EXE_LINKER_FLAGS="$LINKER_FLAGS" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINKER_FLAGS" \
            -G Ninja ..; \
    fi && \
    \
    echo "✅ CMake configuration completed" && \
    \
    echo "🔨 Starting compilation with $(nproc) cores..." && \
    ninja -j$(nproc) && \
    echo "✅ Compilation completed successfully" && \
    \
    echo "📦 Installing FEX binaries..." && \
    ninja install && \
    echo "✅ Installation completed" && \
    \
    # Show ccache statistics if enabled
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "📊 ccache Statistics (${CCACHE_SOURCE}):" && \
        if [ "$CCACHE_SOURCE" = "prebuilt" ]; then \
            /usr/local/bin/ccache --show-stats; \
        else \
            ccache --show-stats; \
        fi && \
        echo "💾 ccache directory size: $(du -sh /tmp/.ccache 2>/dev/null || echo 'unknown')"; \
    fi && \
    \
    echo "🧹 Cleaning up build artifacts..." && \
    rm -rf /tmp/fex-source /tmp/ccache-info /ccache-binary && \
    echo "🎉 FEX build completed successfully!"

#==============================================
# Runtime Stage - Ubuntu & Fedora Support with Debug
#==============================================
FROM ${BASE_IMAGE} AS runtime

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG ROOTFS_TYPE=squashfs

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul

# Detect OS type for runtime with debugging
RUN echo "🔍 Starting runtime OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "🐧 Runtime: Detected Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "🐧 Runtime: Detected Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone && \
        echo "⏰ Timezone set to: $TZ"; \
    else \
        echo "❌ Runtime: Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "✅ Runtime OS detection completed"

# Install runtime dependencies only with detailed debugging
RUN echo "📦 Starting runtime dependencies installation..." && \
    . /etc/distro-info && \
    echo "🔍 Runtime distribution type: $(cat /etc/distro-info)" && \
    echo "📊 Runtime build parameters:" && \
    echo "  - ROOTFS_OS: ${ROOTFS_OS}" && \
    echo "  - ROOTFS_VERSION: ${ROOTFS_VERSION}" && \
    echo "  - ROOTFS_TYPE: ${ROOTFS_TYPE}" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "🔧 Setting up Debian/Ubuntu runtime environment..." && \
        apt-get update -qq && \
        echo "📦 Installing minimal runtime packages..." && \
        apt-get install -qq -y --no-install-recommends \
            squashfs-tools squashfuse sudo \
            libstdc++6 libc6 && \
        echo "✅ Basic runtime packages installed" && \
        \
        # Install latest libstdc++6 for Ubuntu versions < 24.04
        if [ "${ROOTFS_OS}" = "ubuntu" ]; then \
            echo "🔍 Checking Ubuntu version for libstdc++6 upgrade..." && \
            UBUNTU_VERSION_NUM=$(echo "${ROOTFS_VERSION}" | sed 's/\.//') && \
            echo "📊 Runtime UBUNTU_VERSION_NUM: ${UBUNTU_VERSION_NUM}" && \
            echo "🧪 Testing version comparison: [ ${UBUNTU_VERSION_NUM} -lt 2404 ]" && \
            if [ "${UBUNTU_VERSION_NUM}" -lt "2404" ]; then \
                echo "🔧 Ubuntu <24.04 detected - upgrading libstdc++6..." && \
                apt-get install -qq -y software-properties-common && \
                add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
                apt-get update -qq && \
                apt-get install --only-upgrade libstdc++6 -qq -y && \
                echo "✅ libstdc++6 upgraded for Ubuntu ${ROOTFS_VERSION}"; \
            else \
                echo "ℹ️ Ubuntu 24.04+ detected - using default libstdc++6"; \
            fi; \
        else \
            echo "ℹ️ Non-Ubuntu distribution - skipping libstdc++6 upgrade"; \
        fi && \
        \
        # Thorough cleanup for size optimization
        echo "🧹 Performing thorough cleanup for size optimization..." && \
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* /var/cache/* && \
        echo "🗑️ Cleaning documentation and locales..." && \
        find /usr/share/doc -depth -type f ! -name copyright -delete 2>/dev/null || true && \
        find /usr/share/man -depth -type f -delete 2>/dev/null || true && \
        rm -rf /usr/share/locale/* 2>/dev/null || true && \
        mkdir -p /usr/share/locale/en_US.UTF-8 2>/dev/null || true && \
        echo "✅ Debian/Ubuntu runtime setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "🔧 Setting up Fedora runtime environment..." && \
        echo "📦 Installing minimal Fedora runtime packages..." && \
        dnf install -q -y --setopt=install_weak_deps=False \
            squashfs-tools squashfuse erofs-fuse erofs-utils \
            sudo util-linux-core libstdc++ glibc && \
        echo "✅ Fedora runtime packages installed" && \
        echo "🧹 Cleaning up Fedora package cache..." && \
        dnf clean all -q && \
        rm -rf /var/cache/dnf /var/tmp/* && \
        echo "✅ Fedora runtime setup completed successfully"; \
    else \
        echo "❌ Unsupported distribution type for runtime" && exit 1; \
    fi && \
    echo "🎉 Runtime dependencies installation completed!"

# Copy FEX binaries from build stage and optimize with debugging
RUN echo "📁 Copying FEX binaries from build stage..." && \
    echo "🔍 Checking FEX installation directory..." && \
    ls -la /usr/local/fex/ 2>/dev/null || echo "⚠️ FEX directory not found yet"
COPY --from=fex-builder /usr/local/fex /usr/local/fex
RUN echo "✅ FEX binaries copied successfully" && \
    echo "📊 FEX installation summary:" && \
    ls -la /usr/local/fex/bin/ && \
    echo "🔧 Optimizing FEX binaries..." && \
    strip /usr/local/fex/bin/* 2>/dev/null || true && \
    echo "🔧 Optimizing FEX shared libraries..." && \
    find /usr/local/fex -name "*.so*" -exec strip --strip-unneeded {} + 2>/dev/null || true && \
    echo "📏 Binary sizes after optimization:" && \
    du -sh /usr/local/fex/bin/* 2>/dev/null || echo "Could not measure binary sizes" && \
    echo "✅ FEX binary optimization completed"
ENV PATH="/usr/local/fex/bin:$PATH"

# Create user with OS-specific configuration and debugging
RUN echo "👤 Starting user creation and configuration..." && \
    . /etc/distro-info && \
    echo "🔍 Creating user 'fex' with bash shell..." && \
    useradd -m -s /bin/bash fex && \
    echo "✅ User 'fex' created successfully" && \
    echo "🔍 Configuring sudo permissions based on distribution..." && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "🐧 Adding fex to sudo group (Debian/Ubuntu)" && \
        usermod -aG sudo fex && \
        echo "✅ User added to sudo group"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "🐧 Adding fex to wheel group (Fedora)" && \
        usermod -aG wheel fex && \
        echo "✅ User added to wheel group"; \
    fi && \
    echo "🔑 Setting up passwordless sudo access..." && \
    echo "fex ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/fex && \
    echo "✅ Sudo configuration completed" && \
    echo "📊 User configuration summary:" && \
    id fex && \
    groups fex && \
    echo "🎉 User creation and configuration completed!"

USER fex
WORKDIR /home/fex

# Setup RootFS using FEXRootFSFetcher with comprehensive debugging
RUN echo "🚀 Starting RootFS setup process..." && \
    echo "📊 RootFS configuration:" && \
    echo "  - Target OS: ${ROOTFS_OS}" && \
    echo "  - Target Version: ${ROOTFS_VERSION}" && \
    echo "  - RootFS Type: ${ROOTFS_TYPE}" && \
    echo "🔍 Checking FEXRootFSFetcher availability..." && \
    which FEXRootFSFetcher && \
    FEXRootFSFetcher --help | head -5 2>/dev/null || echo "⚠️ Could not display FEXRootFSFetcher help" && \
    echo "📥 Starting RootFS download and extraction..." && \
    echo "⏳ This process may take several minutes..." && \
    FEXRootFSFetcher -yx --distro-name=${ROOTFS_OS} --distro-version=${ROOTFS_VERSION} --force-ui=tty && \
    echo "✅ RootFS download and extraction completed" && \
    \
    echo "🔧 Configuring RootFS permissions..." && \
    chown -R fex:fex /home/fex/.fex-emu && \
    echo "✅ RootFS permissions configured" && \
    \
    echo "🧹 Cleaning up RootFS artifacts..." && \
    echo "📊 RootFS contents before cleanup:" && \
    ls -la /home/fex/.fex-emu/RootFS/ 2>/dev/null || echo "RootFS directory not found" && \
    rm -rf /home/fex/.fex-emu/RootFS/*.sqsh && \
    rm -rf /home/fex/.fex-emu/RootFS/*.ero && \
    echo "📊 RootFS contents after cleanup:" && \
    ls -la /home/fex/.fex-emu/RootFS/ 2>/dev/null || echo "RootFS directory not found" && \
    echo "💾 Final RootFS size:" && \
    du -sh /home/fex/.fex-emu/ 2>/dev/null || echo "Could not measure RootFS size" && \
    echo "🎉 RootFS extracted and configured successfully!"

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["/bin/bash"]
