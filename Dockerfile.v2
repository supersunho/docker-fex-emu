ARG BASE_IMAGE=ubuntu:24.04

#==============================================
# Build Stage - Ubuntu & Fedora Support with Debug
#==============================================
FROM ${BASE_IMAGE} AS fex-builder

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG LLVM_VERSION=18
ARG CCACHE_DIR=/tmp/.ccache
ARG ENABLE_CCACHE=false

# Set environment variables for non-interactive installation and ccache
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul
ENV CCACHE_DIR=${CCACHE_DIR}
ENV ENABLE_CCACHE=${ENABLE_CCACHE}

# Detect OS type with debugging
RUN echo "üîç Starting OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "üêß Detected: Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "üêß Detected: Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "‚ùå Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "‚úÖ OS detection completed"

# Install build dependencies with detailed debugging
RUN echo "üì¶ Starting package installation..." && \
    . /etc/distro-info && \
    echo "üîç Distribution type: $(cat /etc/distro-info)" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "üîß Setting up Debian/Ubuntu environment..." && \
        apt-get update && \
        echo "üì¶ Installing base development packages..." && \
        apt-get install -y --no-install-recommends \
            git cmake ninja-build pkg-config ccache \
            nasm python3-dev python3-clang python3-setuptools \
            libcap-dev libglfw3-dev libepoxy-dev libsdl2-dev \
            linux-headers-generic curl wget \
            software-properties-common openssl libssl-dev && \
        echo "‚úÖ Base packages installed successfully" && \
        \
        # LLVM installation with debugging
        if [ "${ROOTFS_OS}" = "ubuntu" ]; then \
            echo "üîç Processing Ubuntu-specific configuration..." && \
            UBUNTU_VERSION_NUM=$(echo "${ROOTFS_VERSION}" | sed 's/\.//') && \
            echo "üìä ROOTFS_VERSION: ${ROOTFS_VERSION}" && \
            echo "üìä UBUNTU_VERSION_NUM: ${UBUNTU_VERSION_NUM}" && \
            echo "üß™ Testing version comparison: [ ${UBUNTU_VERSION_NUM} -ge 2404 ]" && \
            if [ "${UBUNTU_VERSION_NUM}" -ge "2404" ]; then \
                echo "‚úÖ Ubuntu 24.04+ detected - using repository LLVM" && \
                apt-get install -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION} && \
                echo "‚úÖ LLVM ${LLVM_VERSION} installed from repository"; \
            else \
                echo "üîß Ubuntu <24.04 detected - using LLVM script" && \
                add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
                apt-get update && \
                apt-get install --only-upgrade libstdc++6 -y && \
                echo "üì• Downloading LLVM installation script..." && \
                wget https://apt.llvm.org/llvm.sh && \
                chmod +x llvm.sh && \
                echo "üîß Installing LLVM ${LLVM_VERSION} via script..." && \
                ./llvm.sh ${LLVM_VERSION} && \
                rm llvm.sh && \
                echo "‚úÖ LLVM ${LLVM_VERSION} installed via script"; \
            fi && \
            \
            # Qt installation debugging
            echo "üîç Checking Qt installation requirements..." && \
            echo "üß™ Testing Ubuntu version for Qt: [ ${UBUNTU_VERSION_NUM} -eq 2004 ]" && \
            if [ "${UBUNTU_VERSION_NUM}" -eq "2004" ]; then \
                echo "üé® Ubuntu 20.04 detected - installing Qt 5.15+" && \
                add-apt-repository ppa:beineri/opt-qt-5.15.2-focal -y && \
                apt-get update && \
                apt-get install -y qt515-meta-minimal qt515declarative qt515tools && \
                echo 'source /opt/qt515/bin/qt515-env.sh' >> ~/.bashrc && \
                echo "‚úÖ Qt 5.15+ installed for Ubuntu 20.04"; \
            else \
                echo "üì¶ Installing default Qt packages for Ubuntu ${ROOTFS_VERSION}" && \
                apt-get install -y qtbase5-dev qtdeclarative5-dev && \
                echo "‚úÖ Default Qt packages installed"; \
            fi; \
        else \
            echo "üîß Processing non-Ubuntu Debian distribution..." && \
            apt-get install -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION} || \
            (echo "üì• Falling back to LLVM script..." && \
             wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh ${LLVM_VERSION} && rm llvm.sh) && \
            apt-get install -y qtbase5-dev qtdeclarative5-dev && \
            echo "‚úÖ Packages installed for Debian distribution"; \
        fi && \
        \
        # Cleanup with status
        echo "üßπ Creating symlinks and cleaning up..." && \
        update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${LLVM_VERSION} 100 && \
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* && \
        echo "‚úÖ Debian/Ubuntu setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "üîß Setting up Fedora environment..." && \
        dnf update -y && \
        echo "üîç Checking LLVM availability..." && \
        if dnf list available llvm${LLVM_VERSION} 2>/dev/null | grep -q llvm${LLVM_VERSION}; then \
            echo "‚úÖ LLVM ${LLVM_VERSION} available in Fedora repositories" && \
            dnf install -y \
                @development-tools cmake ninja-build pkg-config ccache \
                llvm${LLVM_VERSION} clang${LLVM_VERSION} lld${LLVM_VERSION} \
                compiler-rt${LLVM_VERSION} libomp${LLVM_VERSION} \
                libstdc++-devel libstdc++-static glibc-devel \
                gcc-c++ binutils-devel; \
        else \
            echo "‚ö†Ô∏è LLVM ${LLVM_VERSION} not available, using default" && \
            dnf install -y \
                @development-tools cmake ninja-build pkg-config ccache \
                llvm llvm-devel clang clang-devel lld \
                libstdc++-devel libstdc++-static glibc-devel \
                gcc-c++ binutils-devel; \
        fi && \
        echo "üîó Creating tool symlinks..." && \
        for tool in ar nm objdump strip; do \
            if [ -f "/usr/bin/llvm-$tool" ] && [ ! -f "/usr/bin/llvm-$tool-${LLVM_VERSION}" ]; then \
                ln -sf "/usr/bin/llvm-$tool" "/usr/bin/llvm-$tool-${LLVM_VERSION}"; \
            fi; \
        done && \
        echo "üì¶ Installing additional Fedora packages..." && \
        dnf install -y \
            nasm python3-clang python3-setuptools openssl-devel \
            libcap-devel glfw-devel libepoxy-devel SDL2-devel \
            qt5-qtdeclarative-devel qt5-qtquickcontrols qt5-qtquickcontrols2 \
            curl wget && \
        dnf clean all && \
        echo "‚úÖ Fedora setup completed successfully"; \
    else \
        echo "‚ùå Unsupported distribution type" && exit 1; \
    fi && \
    echo "üéâ All package installation completed!"

# Copy FEX source and build with comprehensive debugging
COPY --from=fex-sources / /tmp/fex-source  
RUN --mount=type=cache,target=/tmp/.ccache \
    echo "üèóÔ∏è Starting FEX build process..." && \
    cd /tmp/fex-source && \
    mkdir -p Build && cd Build && \
    echo "üìä Build environment summary:" && \
    echo "  - ENABLE_CCACHE: ${ENABLE_CCACHE}" && \
    echo "  - CCACHE_DIR: ${CCACHE_DIR}" && \
    echo "  - LLVM_VERSION: ${LLVM_VERSION}" && \
    \
    # Configure ccache environment
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "üöÄ Configuring ccache acceleration..." && \
        mkdir -p /tmp/ccache-temp && \
        export CCACHE_BASEDIR=/tmp/fex-source && \
        export CCACHE_TEMPDIR=/tmp/ccache-temp && \
        export CCACHE_DIR=/tmp/.ccache && \
        export CCACHE_MAXSIZE=2G && \
        export CCACHE_COMPRESS=1 && \
        export CCACHE_SLOPPINESS=pch_defines,time_macros && \
        ccache --zero-stats && \
        echo "‚úÖ ccache enabled with directory: $CCACHE_DIR"; \
    else \
        echo "‚ÑπÔ∏è ccache disabled for this build"; \
    fi && \
    \
    # Detect and configure compiler
    echo "üîç Detecting compilers..." && \
    if command -v clang-${LLVM_VERSION} >/dev/null 2>&1; then \
        CC_COMPILER=clang-${LLVM_VERSION}; \
        CXX_COMPILER=clang++-${LLVM_VERSION}; \
        echo "‚úÖ Using versioned compilers: $CC_COMPILER / $CXX_COMPILER"; \
    else \
        CC_COMPILER=clang; \
        CXX_COMPILER=clang++; \
        echo "‚ö†Ô∏è Using default compilers: $CC_COMPILER / $CXX_COMPILER"; \
    fi && \
    \
    # Configure OS-specific linker flags
    echo "üîó Configuring linker flags..." && \
    . /etc/distro-info && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        LINKER_FLAGS="-static-libstdc++ -static-libgcc"; \
        echo "üìã Debian linker flags: $LINKER_FLAGS"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        LINKER_FLAGS="-static-libstdc++ -static-libgcc -Wl,--as-needed"; \
        echo "üìã Fedora linker flags: $LINKER_FLAGS"; \
    fi && \
    \
    # Build FEX with conditional ccache
    echo "‚öôÔ∏è Running CMake configuration..." && \
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "üöÄ Building with ccache acceleration..." && \
        CC=$CC_COMPILER CXX=$CXX_COMPILER cmake \
            -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_LINKER=lld \
            -DENABLE_LTO=True \
            -DBUILD_TESTS=False \
            -DENABLE_ASSERTIONS=False \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXE_LINKER_FLAGS="$LINKER_FLAGS" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINKER_FLAGS" \
            -G Ninja ..; \
    else \
        echo "üî® Building without ccache..." && \
        CC=$CC_COMPILER CXX=$CXX_COMPILER cmake \
            -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_LINKER=lld \
            -DENABLE_LTO=True \
            -DBUILD_TESTS=False \
            -DENABLE_ASSERTIONS=False \
            -DCMAKE_EXE_LINKER_FLAGS="$LINKER_FLAGS" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINKER_FLAGS" \
            -G Ninja ..; \
    fi && \
    echo "‚úÖ CMake configuration completed" && \
    \
    echo "üî® Starting compilation with $(nproc) cores..." && \
    ninja -j$(nproc) && \
    echo "‚úÖ Compilation completed successfully" && \
    \
    echo "üì¶ Installing FEX binaries..." && \
    ninja install && \
    echo "‚úÖ Installation completed" && \
    \
    # Show ccache statistics if enabled
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "üìä ccache Statistics:" && \
        ccache --show-stats && \
        echo "üíæ ccache directory size: $(du -sh /tmp/.ccache 2>/dev/null || echo 'unknown')"; \
    fi && \
    \
    echo "üßπ Cleaning up build artifacts..." && \
    rm -rf /tmp/fex-source && \
    echo "üéâ FEX build completed successfully!"

#==============================================
# Runtime Stage - Ubuntu & Fedora Support with Debug
#==============================================
FROM ${BASE_IMAGE} AS runtime

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG ROOTFS_TYPE=squashfs

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul

# Detect OS type for runtime with debugging
RUN echo "üîç Starting runtime OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "üêß Runtime: Detected Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "üêß Runtime: Detected Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone && \
        echo "‚è∞ Timezone set to: $TZ"; \
    else \
        echo "‚ùå Runtime: Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "‚úÖ Runtime OS detection completed"

# Install runtime dependencies only with detailed debugging
RUN echo "üì¶ Starting runtime dependencies installation..." && \
    . /etc/distro-info && \
    echo "üîç Runtime distribution type: $(cat /etc/distro-info)" && \
    echo "üìä Runtime build parameters:" && \
    echo "  - ROOTFS_OS: ${ROOTFS_OS}" && \
    echo "  - ROOTFS_VERSION: ${ROOTFS_VERSION}" && \
    echo "  - ROOTFS_TYPE: ${ROOTFS_TYPE}" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "üîß Setting up Debian/Ubuntu runtime environment..." && \
        apt-get update && \
        echo "üì¶ Installing minimal runtime packages..." && \
        apt-get install -y --no-install-recommends \
            squashfs-tools squashfuse sudo \
            libstdc++6 libc6 && \
        echo "‚úÖ Basic runtime packages installed" && \
        \
        # Install latest libstdc++6 for Ubuntu versions < 24.04
        if [ "${ROOTFS_OS}" = "ubuntu" ]; then \
            echo "üîç Checking Ubuntu version for libstdc++6 upgrade..." && \
            UBUNTU_VERSION_NUM=$(echo "${ROOTFS_VERSION}" | sed 's/\.//') && \
            echo "üìä Runtime UBUNTU_VERSION_NUM: ${UBUNTU_VERSION_NUM}" && \
            echo "üß™ Testing version comparison: [ ${UBUNTU_VERSION_NUM} -lt 2404 ]" && \
            if [ "${UBUNTU_VERSION_NUM}" -lt "2404" ]; then \
                echo "üîß Ubuntu <24.04 detected - upgrading libstdc++6..." && \
                apt-get install -y software-properties-common && \
                add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
                apt-get update && \
                apt-get install --only-upgrade libstdc++6 -y && \
                echo "‚úÖ libstdc++6 upgraded for Ubuntu ${ROOTFS_VERSION}"; \
            else \
                echo "‚ÑπÔ∏è Ubuntu 24.04+ detected - using default libstdc++6"; \
            fi; \
        else \
            echo "‚ÑπÔ∏è Non-Ubuntu distribution - skipping libstdc++6 upgrade"; \
        fi && \
        \
        # Thorough cleanup for size optimization
        echo "üßπ Performing thorough cleanup for size optimization..." && \
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* /var/cache/* && \
        echo "üóëÔ∏è Cleaning documentation and locales..." && \
        find /usr/share/doc -depth -type f ! -name copyright -delete 2>/dev/null || true && \
        find /usr/share/man -depth -type f -delete 2>/dev/null || true && \
        rm -rf /usr/share/locale/* 2>/dev/null || true && \
        mkdir -p /usr/share/locale/en_US.UTF-8 2>/dev/null || true && \
        echo "‚úÖ Debian/Ubuntu runtime setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "üîß Setting up Fedora runtime environment..." && \
        echo "üì¶ Installing minimal Fedora runtime packages..." && \
        dnf install -y --setopt=install_weak_deps=False \
            squashfs-tools squashfuse erofs-fuse erofs-utils \
            sudo util-linux-core libstdc++ glibc && \
        echo "‚úÖ Fedora runtime packages installed" && \
        echo "üßπ Cleaning up Fedora package cache..." && \
        dnf clean all && \
        rm -rf /var/cache/dnf /var/tmp/* && \
        echo "‚úÖ Fedora runtime setup completed successfully"; \
    else \
        echo "‚ùå Unsupported distribution type for runtime" && exit 1; \
    fi && \
    echo "üéâ Runtime dependencies installation completed!"

# Copy FEX binaries from build stage and optimize with debugging
RUN echo "üìÅ Copying FEX binaries from build stage..." && \
    echo "üîç Checking FEX installation directory..." && \
    ls -la /usr/local/fex/ 2>/dev/null || echo "‚ö†Ô∏è FEX directory not found yet"
COPY --from=fex-builder /usr/local/fex /usr/local/fex
RUN echo "‚úÖ FEX binaries copied successfully" && \
    echo "üìä FEX installation summary:" && \
    ls -la /usr/local/fex/bin/ && \
    echo "üîß Optimizing FEX binaries..." && \
    strip /usr/local/fex/bin/* 2>/dev/null || true && \
    echo "üîß Optimizing FEX shared libraries..." && \
    find /usr/local/fex -name "*.so*" -exec strip --strip-unneeded {} + 2>/dev/null || true && \
    echo "üìè Binary sizes after optimization:" && \
    du -sh /usr/local/fex/bin/* 2>/dev/null || echo "Could not measure binary sizes" && \
    echo "‚úÖ FEX binary optimization completed"
ENV PATH="/usr/local/fex/bin:$PATH"

# Create user with OS-specific configuration and debugging
RUN echo "üë§ Starting user creation and configuration..." && \
    . /etc/distro-info && \
    echo "üîç Creating user 'fex' with bash shell..." && \
    useradd -m -s /bin/bash fex && \
    echo "‚úÖ User 'fex' created successfully" && \
    echo "üîç Configuring sudo permissions based on distribution..." && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "üêß Adding fex to sudo group (Debian/Ubuntu)" && \
        usermod -aG sudo fex && \
        echo "‚úÖ User added to sudo group"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "üêß Adding fex to wheel group (Fedora)" && \
        usermod -aG wheel fex && \
        echo "‚úÖ User added to wheel group"; \
    fi && \
    echo "üîë Setting up passwordless sudo access..." && \
    echo "fex ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/fex && \
    echo "‚úÖ Sudo configuration completed" && \
    echo "üìä User configuration summary:" && \
    id fex && \
    groups fex && \
    echo "üéâ User creation and configuration completed!"

USER fex
WORKDIR /home/fex

# Setup RootFS using FEXRootFSFetcher with comprehensive debugging
RUN echo "üöÄ Starting RootFS setup process..." && \
    echo "üìä RootFS configuration:" && \
    echo "  - Target OS: ${ROOTFS_OS}" && \
    echo "  - Target Version: ${ROOTFS_VERSION}" && \
    echo "  - RootFS Type: ${ROOTFS_TYPE}" && \
    echo "üîç Checking FEXRootFSFetcher availability..." && \
    which FEXRootFSFetcher && \
    FEXRootFSFetcher --help | head -5 2>/dev/null || echo "‚ö†Ô∏è Could not display FEXRootFSFetcher help" && \
    echo "üì• Starting RootFS download and extraction..." && \
    echo "‚è≥ This process may take several minutes..." && \
    FEXRootFSFetcher -yx --distro-name=${ROOTFS_OS} --distro-version=${ROOTFS_VERSION} --force-ui=tty && \
    echo "‚úÖ RootFS download and extraction completed" && \
    \
    echo "üîß Configuring RootFS permissions..." && \
    chown -R fex:fex /home/fex/.fex-emu && \
    echo "‚úÖ RootFS permissions configured" && \
    \
    echo "üßπ Cleaning up RootFS artifacts..." && \
    echo "üìä RootFS contents before cleanup:" && \
    ls -la /home/fex/.fex-emu/RootFS/ 2>/dev/null || echo "RootFS directory not found" && \
    rm -rf /home/fex/.fex-emu/RootFS/*.sqsh && \
    rm -rf /home/fex/.fex-emu/RootFS/*.ero && \
    echo "üìä RootFS contents after cleanup:" && \
    ls -la /home/fex/.fex-emu/RootFS/ 2>/dev/null || echo "RootFS directory not found" && \
    echo "üíæ Final RootFS size:" && \
    du -sh /home/fex/.fex-emu/ 2>/dev/null || echo "Could not measure RootFS size" && \
    echo "üéâ RootFS extracted and configured successfully!"

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["/bin/bash"]
