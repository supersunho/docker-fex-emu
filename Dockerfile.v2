ARG BASE_IMAGE=ubuntu:24.04

#==============================================
# Build Stage - Ubuntu & Fedora Support
#==============================================
FROM ${BASE_IMAGE} AS fex-builder

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG LLVM_VERSION=18
ARG CCACHE_DIR=/tmp/.ccache
ARG ENABLE_CCACHE=false

# Set environment variables for non-interactive installation and ccache
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul
ENV CCACHE_DIR=${CCACHE_DIR}
ENV ENABLE_CCACHE=${ENABLE_CCACHE}

# Detect OS type
RUN if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi

# Install build dependencies for Ubuntu & Fedora
RUN . /etc/distro-info && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
            git cmake ninja-build pkg-config ccache \
            nasm python3-dev python3-clang python3-setuptools \
            libcap-dev libglfw3-dev libepoxy-dev libsdl2-dev \
            linux-headers-generic curl wget \
            software-properties-common openssl libssl-dev && \
        \
        # LLVM installation based on Ubuntu version
        if [ "${ROOTFS_OS}" = "ubuntu" ]; then \
            UBUNTU_VERSION_NUM=$(echo "${ROOTFS_VERSION}" | sed 's/\.//'); \
            if [ "${UBUNTU_VERSION_NUM}" -ge "2404" ]; then \
                echo "Installing LLVM-${LLVM_VERSION} from Ubuntu 24.04+ repository" && \
                apt-get install -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION}; \
            else \
                echo "Installing LLVM-${LLVM_VERSION} via official script for Ubuntu ${ROOTFS_VERSION}" && \
                add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
                apt-get update && \
                apt-get install --only-upgrade libstdc++6 -y && \
                wget https://apt.llvm.org/llvm.sh && \
                chmod +x llvm.sh && \
                ./llvm.sh ${LLVM_VERSION} && \
                rm llvm.sh; \
            fi; \
            \
            # Qt installation for Ubuntu 20.04 compatibility
            if [ "${UBUNTU_VERSION_NUM}" -eq "2004" ]; then \
                echo "Installing Qt 5.15+ for Ubuntu 20.04 compatibility" && \
                add-apt-repository ppa:beineri/opt-qt-5.15.2-focal -y && \
                apt-get update && \
                apt-get install -y qt515-meta-minimal qt515declarative qt515tools && \
                echo 'source /opt/qt515/bin/qt515-env.sh' >> ~/.bashrc; \
            else \
                echo "Installing default Qt packages" && \
                apt-get install -y qtbase5-dev qtdeclarative5-dev; \
            fi; \
        else \
            # Other Debian-based distributions
            apt-get install -y clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION} || \
            (wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh ${LLVM_VERSION} && rm llvm.sh) && \
            apt-get install -y qtbase5-dev qtdeclarative5-dev; \
        fi && \
        \
        # Create symlinks and cleanup
        update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${LLVM_VERSION} 100 && \
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/*; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        dnf update -y && \
        # Check LLVM version availability and install
        if dnf list available llvm${LLVM_VERSION} 2>/dev/null | grep -q llvm${LLVM_VERSION}; then \
            dnf install -y \
                @development-tools cmake ninja-build pkg-config ccache \
                llvm${LLVM_VERSION} clang${LLVM_VERSION} lld${LLVM_VERSION} \
                compiler-rt${LLVM_VERSION} libomp${LLVM_VERSION} \
                libstdc++-devel libstdc++-static glibc-devel \
                gcc-c++ binutils-devel; \
        else \
            echo "LLVM ${LLVM_VERSION} not available, installing default LLVM" && \
            dnf install -y \
                @development-tools cmake ninja-build pkg-config ccache \
                llvm llvm-devel clang clang-devel lld \
                libstdc++-devel libstdc++-static glibc-devel \
                gcc-c++ binutils-devel; \
        fi && \
        # Create tool symlinks safely
        for tool in ar nm objdump strip; do \
            if [ -f "/usr/bin/llvm-$tool" ] && [ ! -f "/usr/bin/llvm-$tool-${LLVM_VERSION}" ]; then \
                ln -sf "/usr/bin/llvm-$tool" "/usr/bin/llvm-$tool-${LLVM_VERSION}"; \
            fi; \
        done && \
        dnf install -y \
            nasm python3-clang python3-setuptools openssl-devel \
            libcap-devel glfw-devel libepoxy-devel SDL2-devel \
            qt5-qtdeclarative-devel qt5-qtquickcontrols qt5-qtquickcontrols2 \
            curl wget && \
        dnf clean all; \
    else \
        echo "Unsupported distribution type" && exit 1; \
    fi

# Copy FEX source from workflow and build with ccache optimization
COPY --from=fex-sources / /tmp/fex-source  
RUN --mount=type=cache,target=/tmp/.ccache \
    cd /tmp/fex-source && \
    mkdir -p Build && cd Build && \
    # Configure ccache environment
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        # 현재 ccache 설정에 추가
        mkdir -p /tmp/ccache-temp && \
        export CCACHE_BASEDIR=/tmp/fex-source && \
        export CCACHE_TEMPDIR=/tmp/ccache-temp && \
        export CCACHE_DIR=/tmp/.ccache && \
        export CCACHE_MAXSIZE=2G && \
        export CCACHE_COMPRESS=1 && \
        export CCACHE_SLOPPINESS=pch_defines,time_macros && \
        ccache --zero-stats && \
        echo "✅ ccache enabled with directory: $CCACHE_DIR"; \
    else \
        echo "ℹ️ ccache disabled"; \
    fi && \
    # Detect and configure compiler
    if command -v clang-${LLVM_VERSION} >/dev/null 2>&1; then \
        CC_COMPILER=clang-${LLVM_VERSION}; \
        CXX_COMPILER=clang++-${LLVM_VERSION}; \
    else \
        CC_COMPILER=clang; \
        CXX_COMPILER=clang++; \
    fi && \
    echo "Using compilers: $CC_COMPILER / $CXX_COMPILER" && \
    # Configure OS-specific linker flags
    . /etc/distro-info && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        LINKER_FLAGS="-static-libstdc++ -static-libgcc"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        LINKER_FLAGS="-static-libstdc++ -static-libgcc -Wl,--as-needed"; \
    fi && \
    # Build FEX with ccache if enabled
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        CC=$CC_COMPILER CXX=$CXX_COMPILER cmake \
            -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_LINKER=lld \
            -DENABLE_LTO=True \
            -DBUILD_TESTS=False \
            -DENABLE_ASSERTIONS=False \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXE_LINKER_FLAGS="$LINKER_FLAGS" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINKER_FLAGS" \
            -G Ninja ..; \
    else \
        CC=$CC_COMPILER CXX=$CXX_COMPILER cmake \
            -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
            -DCMAKE_BUILD_TYPE=Release \
            -DUSE_LINKER=lld \
            -DENABLE_LTO=True \
            -DBUILD_TESTS=False \
            -DENABLE_ASSERTIONS=False \
            -DCMAKE_EXE_LINKER_FLAGS="$LINKER_FLAGS" \
            -DCMAKE_SHARED_LINKER_FLAGS="$LINKER_FLAGS" \
            -G Ninja ..; \
    fi && \
    ninja -j$(nproc) && \
    ninja install && \
    # Show ccache statistics if enabled
    if [ "${ENABLE_CCACHE:-false}" = "true" ]; then \
        echo "=== ccache Statistics ===" && \
        ccache --show-stats && \
        echo "ccache directory size: $(du -sh /tmp/.ccache 2>/dev/null || echo 'unknown')"; \
    fi && \
    echo "FEX build completed successfully" && \
    rm -rf /tmp/fex-source


#==============================================
# Runtime Stage - Ubuntu & Fedora Support
#==============================================
FROM ${BASE_IMAGE} AS runtime

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG ROOTFS_TYPE=squashfs

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul

# Detect OS type for runtime
RUN if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi

# Install runtime dependencies only
RUN . /etc/distro-info && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
            squashfs-tools squashfuse sudo \
            libstdc++6 libc6 && \
        # Install latest libstdc++6 for Ubuntu versions < 24.04
        if [ "${ROOTFS_OS}" = "ubuntu" ]; then \
            UBUNTU_VERSION_NUM=$(echo "${ROOTFS_VERSION}" | sed 's/\.//'); \
            if [ "${UBUNTU_VERSION_NUM}" -lt "2404" ]; then \
                apt-get install -y software-properties-common && \
                add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
                apt-get update && \
                apt-get install --only-upgrade libstdc++6 -y; \
            fi; \
        fi && \
        # Thorough cleanup for size optimization
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* /var/cache/*; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        dnf install -y --setopt=install_weak_deps=False \
            squashfs-tools squashfuse erofs-fuse erofs-utils \
            sudo util-linux-core libstdc++ glibc && \
        dnf clean all && \
        rm -rf /var/cache/dnf /var/tmp/*; \
    fi

# Copy FEX binaries from build stage and optimize
COPY --from=fex-builder /usr/local/fex /usr/local/fex
RUN strip /usr/local/fex/bin/* 2>/dev/null || true && \
    find /usr/local/fex -name "*.so*" -exec strip --strip-unneeded {} + 2>/dev/null || true
ENV PATH="/usr/local/fex/bin:$PATH"

# Create user with OS-specific configuration
RUN . /etc/distro-info && \
    useradd -m -s /bin/bash fex && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        usermod -aG sudo fex; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        usermod -aG wheel fex; \
    fi && \
    echo "fex ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/fex

USER fex
WORKDIR /home/fex

# Setup RootFS using FEXRootFSFetcher
RUN FEXRootFSFetcher -yx --distro-name=${ROOTFS_OS} --distro-version=${ROOTFS_VERSION} --force-ui=tty && \
    chown -R fex:fex /home/fex/.fex-emu && \
    rm -rf /home/fex/.fex-emu/RootFS/*.sqsh && \
    rm -rf /home/fex/.fex-emu/RootFS/*.ero && \
    echo "RootFS extracted and configured successfully"

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["/bin/bash"]
