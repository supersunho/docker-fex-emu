ARG BASE_IMAGE=ubuntu:24.04

#==============================================
# Build Stage - Ubuntu & Fedora Support
#==============================================
FROM ${BASE_IMAGE} AS fex-builder

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG LLVM_VERSION=18
ARG CCACHE_DIR=/tmp/.ccache
ARG ENABLE_CCACHE=false

# Set environment variables for non-interactive installation and ccache
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul
ENV CCACHE_DIR=${CCACHE_DIR}
ENV ENABLE_CCACHE=${ENABLE_CCACHE}

# Detect OS type
RUN echo "üîç Starting OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "üêß Detected: Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "üêß Detected: Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "‚ùå Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "‚úÖ OS detection completed"

# Install build dependencies (simplified for Ubuntu 22.04+)
RUN echo "üì¶ Starting package installation..." && \
    . /etc/distro-info && \
    echo "üîç Distribution type: $(cat /etc/distro-info)" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "üîß Setting up Debian/Ubuntu environment..." && \
        apt-get update -qq && \
        echo "üì¶ Installing development packages..." && \
        apt-get install -qq -y --no-install-recommends \
            git cmake ninja-build pkg-config ccache \
            nasm python3-dev python3-clang python3-setuptools \
            libcap-dev libglfw3-dev libepoxy-dev libsdl2-dev \
            linux-headers-generic curl wget \
            software-properties-common openssl libssl-dev \
            binutils binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            qtbase5-dev qtdeclarative5-dev && \
        echo "‚úÖ Base packages installed successfully" && \
        \
        # Smart LLVM installation with apt-cache check + script fallback
        echo "üîß Installing LLVM ${LLVM_VERSION} with smart detection..." && \
        REQUIRED_LLVM_PACKAGES="clang-${LLVM_VERSION} lld-${LLVM_VERSION} llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-tools" && \
        SYSTEM_LLVM_AVAILABLE=true && \
        echo "üîç Checking system repository for LLVM ${LLVM_VERSION}..." && \
        for pkg in $REQUIRED_LLVM_PACKAGES; do \
            if apt-cache show "$pkg" >/dev/null 2>&1; then \
                echo "‚úÖ Found system package: $pkg"; \
            else \
                echo "‚ùå Missing system package: $pkg" && \
                SYSTEM_LLVM_AVAILABLE=false; \
            fi; \
        done && \
        \
        if [ "$SYSTEM_LLVM_AVAILABLE" = "true" ]; then \
            echo "üéØ Installing LLVM ${LLVM_VERSION} from system repository..." && \
            apt-get install -qq -y \
                clang-${LLVM_VERSION} \
                lld-${LLVM_VERSION} \
                llvm-${LLVM_VERSION} \
                llvm-${LLVM_VERSION}-dev \
                llvm-${LLVM_VERSION}-tools \
                libedit-dev libffi-dev && \
            echo "‚úÖ LLVM ${LLVM_VERSION} installed from system repository"; \
        else \
            echo "üîÑ Using official LLVM installation script..." && \
            wget --no-cache --no-http-keep-alive -q https://apt.llvm.org/llvm.sh -O llvm.sh && \
            chmod +x llvm.sh && \
            ./llvm.sh ${LLVM_VERSION} >/dev/null 2>&1 && \
            rm llvm.sh && \
            # Verify installation
            if command -v clang-${LLVM_VERSION} >/dev/null 2>&1; then \
                echo "‚úÖ LLVM ${LLVM_VERSION} installed via official script"; \
            else \
                echo "‚ùå LLVM installation failed" && \
                exit 1; \
            fi; \
        fi && \
        \
        # Verify final installation
        echo "üîç Verifying LLVM ${LLVM_VERSION} installation..." && \
        clang-${LLVM_VERSION} --version && \
        echo "‚úÖ LLVM ${LLVM_VERSION} verification completed" && \
        \
        # Simple cleanup
        echo "üßπ Cleaning up..." && \
        update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${LLVM_VERSION} 100 && \
        apt-get autoremove -qq -y && \
        apt-get autoclean -qq && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* && \
        echo "‚úÖ Debian/Ubuntu setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "üîß Setting up Fedora environment..." && \
        dnf update -q -y && \
        echo "üì¶ Installing Fedora packages..." && \
        dnf install -q -y \
            @development-tools cmake ninja-build pkg-config ccache \
            llvm${LLVM_VERSION} clang${LLVM_VERSION} lld${LLVM_VERSION} \
            compiler-rt${LLVM_VERSION} libomp${LLVM_VERSION} \
            libstdc++-devel libstdc++-static glibc-devel \
            gcc-c++ binutils-devel binutils \
            nasm python3-clang python3-setuptools openssl-devel \
            libcap-devel glfw-devel libepoxy-devel SDL2-devel \
            qt5-qtdeclarative-devel qt5-qtquickcontrols qt5-qtquickcontrols2 \
            curl wget && \
        dnf clean all -q && \
        echo "‚úÖ Fedora setup completed successfully"; \
    else \
        echo "‚ùå Unsupported distribution type" && exit 1; \
    fi && \
    echo "üéâ Package installation completed!"

# Copy ccache binary from build context
COPY --from=ccache-binary . /tmp/ccache-binary

# Simple ccache setup for Ubuntu 22.04+
RUN echo "üì¶ Setting up ccache..." && \
    echo "üîç System information:" && \
    echo "  - GLIBC version: $(ldd --version | head -1)" && \
    echo "  - Ubuntu version: ${ROOTFS_VERSION}" && \
    echo "  - Architecture: $(uname -m)" && \
    \
    # Simple ccache configuration
    echo "üöÄ Enabling system ccache for Ubuntu 22.04+" && \
    echo "CCACHE_SOURCE=system" > /tmp/ccache-info && \
    \
    # Verify system ccache
    if ccache --version >/dev/null 2>&1; then \
        echo "‚úÖ System ccache working correctly:" && \
        ccache --version; \
    else \
        echo "‚ö†Ô∏è System ccache not available, disabling ccache" && \
        echo "CCACHE_SOURCE=disabled" > /tmp/ccache-info; \
    fi && \
    echo "‚úÖ ccache setup completed"

# Copy FEX source and build (simplified)
COPY --from=fex-sources / /tmp/fex-source  
RUN --mount=type=cache,target=/tmp/.ccache \
    echo "üèóÔ∏è Starting FEX build process (Ubuntu 22.04+ optimized)..." && \
    cd /tmp/fex-source && \
    \
    # Check ccache setup
    . /tmp/ccache-info && \
    echo "üìä Build environment summary:" && \
    echo "  - ENABLE_CCACHE: ${ENABLE_CCACHE}" && \
    echo "  - CCACHE_SOURCE: ${CCACHE_SOURCE}" && \
    echo "  - LLVM_VERSION: ${LLVM_VERSION}" && \
    echo "  - CCACHE_BINARY: $(which ccache 2>/dev/null || echo 'not found')" && \
    \
    mkdir -p Build && cd Build && \
    \
    # Simple compiler detection
    if command -v clang-${LLVM_VERSION} >/dev/null 2>&1; then \
        CC_COMPILER=clang-${LLVM_VERSION} && \
        CXX_COMPILER=clang++-${LLVM_VERSION}; \
    else \
        CC_COMPILER=clang && \
        CXX_COMPILER=clang++; \
    fi && \
    echo "‚úÖ Using compilers: $CC_COMPILER / $CXX_COMPILER" && \
    \
    # Simple AR tools detection
    if command -v llvm-ar-${LLVM_VERSION} >/dev/null 2>&1; then \
        AR_TOOL=$(which llvm-ar-${LLVM_VERSION}) && \
        RANLIB_TOOL=$(which llvm-ranlib-${LLVM_VERSION}); \
    else \
        AR_TOOL=$(which ar) && \
        RANLIB_TOOL=$(which ranlib); \
    fi && \
    echo "‚úÖ Using AR tools: $AR_TOOL" && \
    \
    # Simple ccache configuration
    if [ "${ENABLE_CCACHE:-false}" = "true" ] && [ "${CCACHE_SOURCE}" != "disabled" ]; then \
        echo "üöÄ Configuring ccache acceleration..." && \
        export CCACHE_BASEDIR=/tmp/fex-source && \
        export CCACHE_DIR=/tmp/.ccache && \
        export CCACHE_MAXSIZE=2G && \
        export CC="ccache $CC_COMPILER" && \
        export CXX="ccache $CXX_COMPILER" && \
        ccache --zero-stats && \
        echo "‚úÖ ccache enabled"; \
    else \
        echo "‚ÑπÔ∏è ccache disabled for this build"; \
    fi && \
    \
    # Simple CMake configuration
    echo "‚öôÔ∏è Running CMake configuration..." && \
    cmake \
        -DCMAKE_INSTALL_PREFIX=/usr/local/fex \
        -DCMAKE_BUILD_TYPE=Release \
        -DUSE_LINKER=lld \
        -DENABLE_LTO=True \
        -DBUILD_TESTS=False \
        -DENABLE_ASSERTIONS=False \
        -DCMAKE_C_COMPILER="$CC_COMPILER" \
        -DCMAKE_CXX_COMPILER="$CXX_COMPILER" \
        -DCMAKE_AR="$AR_TOOL" \
        -DCMAKE_RANLIB="$RANLIB_TOOL" \
        -DCMAKE_C_COMPILER_AR="$AR_TOOL" \
        -DCMAKE_CXX_COMPILER_AR="$AR_TOOL" \
        -G Ninja .. && \
    echo "‚úÖ CMake configuration completed" && \
    \
    echo "üî® Starting compilation..." && \
    ninja -j$(($(nproc) - 1)) && \
    echo "‚úÖ Compilation completed successfully" && \
    \
    echo "üì¶ Installing FEX binaries..." && \
    ninja install && \
    echo "‚úÖ Installation completed" && \
    \
    # Show ccache statistics if enabled
    if [ "${ENABLE_CCACHE:-false}" = "true" ] && [ "${CCACHE_SOURCE}" != "disabled" ]; then \
        echo "üìä ccache Statistics:" && \
        ccache --show-stats; \
    fi && \
    \
    echo "üßπ Cleaning up build artifacts..." && \
    rm -rf /tmp/fex-source /tmp/ccache-info /tmp/ccache-binary && \
    echo "üéâ FEX build completed successfully!"

#==============================================
# Runtime Stage - Ubuntu & Fedora Support
#==============================================
FROM ${BASE_IMAGE} AS runtime

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG ROOTFS_TYPE=squashfs

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul

# Detect OS type for runtime
RUN echo "üîç Starting runtime OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "üêß Runtime: Detected Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "üêß Runtime: Detected Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "‚ùå Runtime: Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "‚úÖ Runtime OS detection completed"

# Install runtime dependencies (simplified)
RUN echo "üì¶ Starting runtime dependencies installation..." && \
    . /etc/distro-info && \
    echo "üìä Runtime build parameters:" && \
    echo "  - ROOTFS_OS: ${ROOTFS_OS}" && \
    echo "  - ROOTFS_VERSION: ${ROOTFS_VERSION}" && \
    echo "  - ROOTFS_TYPE: ${ROOTFS_TYPE}" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "üîß Setting up Debian/Ubuntu runtime environment..." && \
        apt-get update -qq && \
        echo "üì¶ Installing minimal runtime packages..." && \
        apt-get install -qq -y --no-install-recommends \
            squashfs-tools squashfuse sudo curl wget jq \
            libstdc++6 libc6 && \
        echo "‚úÖ Runtime packages installed" && \
        \
        # Cleanup for size optimization
        echo "üßπ Performing cleanup for size optimization..." && \
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* /var/cache/* && \
        echo "‚úÖ Debian/Ubuntu runtime setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "üîß Setting up Fedora runtime environment..." && \
        echo "üì¶ Installing minimal Fedora runtime packages..." && \
        dnf install -q -y --setopt=install_weak_deps=False \
            squashfs-tools squashfuse erofs-fuse erofs-utils curl wget jq \
            sudo util-linux-core libstdc++ glibc && \
        echo "‚úÖ Fedora runtime packages installed" && \
        echo "üßπ Cleaning up Fedora package cache..." && \
        dnf clean all -q && \
        rm -rf /var/cache/dnf /var/tmp/* && \
        echo "‚úÖ Fedora runtime setup completed successfully"; \
    else \
        echo "‚ùå Unsupported distribution type for runtime" && exit 1; \
    fi && \
    echo "üéâ Runtime dependencies installation completed!"

# Copy FEX binaries from build stage and optimize
COPY --from=fex-builder /usr/local/fex /usr/local/fex
RUN echo "‚úÖ FEX binaries copied successfully" && \
    echo "üìä FEX installation summary:" && \
    ls -la /usr/local/fex/bin/ && \
    echo "üîß Optimizing FEX binaries..." && \
    strip /usr/local/fex/bin/* 2>/dev/null || true && \
    find /usr/local/fex -name "*.so*" -exec strip --strip-unneeded {} + 2>/dev/null || true && \
    echo "‚úÖ FEX binary optimization completed"
ENV PATH="/usr/local/fex/bin:$PATH"

# Create user with OS-specific configuration (MOVED BEFORE ROOTFS setup)
RUN echo "üë§ Starting user creation and configuration..." && \
    . /etc/distro-info && \
    useradd -m -s /bin/bash fex && \
    echo "‚úÖ User 'fex' created successfully" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        usermod -aG sudo fex; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        usermod -aG wheel fex; \
    fi && \
    echo "fex ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/fex && \
    echo "‚úÖ User configuration completed"

# Setup RootFS using FEXRootFSFetcher FIRST, manual fallback
RUN echo "üöÄ Starting RootFS setup process..." && \
    echo "üìä RootFS configuration:" && \
    echo "  - Target OS: ${ROOTFS_OS}" && \
    echo "  - Target Version: ${ROOTFS_VERSION}" && \
    echo "  - RootFS Type: ${ROOTFS_TYPE}" && \
    \
    # Create user first (FEXRootFSFetcher is per-user install)
    useradd -m -s /bin/bash fex 2>/dev/null || true && \
    \
    # Test FEX RootFS API connectivity to determine primary method
    echo "üîç Testing FEX RootFS API connectivity..." && \
    curl -H 'Cache-Control: no-cache, no-store' -s --connect-timeout 10 https://rootfs.fex-emu.gg/RootFS_links.json >/dev/null 2>&1 && \
    API_TEST_RESULT=$? && \
    \
    if [ $API_TEST_RESULT -eq 0 ]; then \
        echo "‚úÖ FEX RootFS API accessible - attempting FEXRootFSFetcher (PRIMARY METHOD)" && \
        \
        # PRIMARY: FEXRootFSFetcher with retry logic
        echo "üì• Starting FEXRootFSFetcher (official recommended method)..." && \
        FEXROOTFS_SUCCESS=false && \
        for attempt in 1 2 3; do \
            echo "‚è≥ FEXRootFSFetcher attempt $attempt/3..." && \
            if timeout 300 sudo -u fex FEXRootFSFetcher -yx --distro-name=${ROOTFS_OS} --distro-version=${ROOTFS_VERSION} --force-ui=tty 2>/dev/null; then \
                echo "‚úÖ FEXRootFSFetcher completed successfully (attempt $attempt)" && \
                FEXROOTFS_SUCCESS=true && \
                break; \
            else \
                echo "‚ùå FEXRootFSFetcher failed (attempt $attempt)" && \
                if [ $attempt -lt 3 ]; then \
                    echo "‚è≥ Waiting 30 seconds before retry..." && \
                    sleep 30; \
                fi; \
            fi; \
        done; \
    else \
        echo "‚ùå FEX RootFS API not accessible - FEXRootFSFetcher will not work" && \
        FEXROOTFS_SUCCESS=false; \
    fi && \
    \
    # FALLBACK: Manual setup if FEXRootFSFetcher failed or API unavailable
    if [ "$FEXROOTFS_SUCCESS" = "false" ]; then \
        echo "üîÑ FEXRootFSFetcher failed or unavailable - falling back to manual setup..." && \
        \
        # Create necessary directories for manual setup
        mkdir -p /home/fex/.fex-emu/RootFS && \
        \
        # Download RootFS JSON with enhanced fallback
        echo "üì• Downloading RootFS links from FEX server (manual method)..." && \
        ROOTFS_JSON_URL="https://rootfs.fex-emu.gg/RootFS_links.json" && \
        ROOTFS_JSON="/tmp/rootfs_links.json" && \
        JSON_DOWNLOAD_SUCCESS=false && \
        \
        # Try wget first (execute outside if statement)
        echo "üîÑ Attempting JSON download via wget..." && \
        wget --no-cache --no-http-keep-alive -q --timeout=30 -O "$ROOTFS_JSON" "$ROOTFS_JSON_URL" >/dev/null 2>&1 && \
        WGET_EXIT_CODE=$? && \
        if [ $WGET_EXIT_CODE -eq 0 ]; then \
            echo "‚úÖ RootFS JSON downloaded successfully via wget" && \
            JSON_DOWNLOAD_SUCCESS=true; \
        else \
            echo "üîÑ wget failed, trying curl..." && \
            curl -H 'Cache-Control: no-cache, no-store' -s --connect-timeout 30 "$ROOTFS_JSON_URL" -o "$ROOTFS_JSON" >/dev/null 2>&1 && \
            CURL_EXIT_CODE=$? && \
            if [ $CURL_EXIT_CODE -eq 0 ]; then \
                echo "‚úÖ RootFS JSON downloaded successfully via curl" && \
                JSON_DOWNLOAD_SUCCESS=true; \
            fi; \
        fi && \
        \
        # Ultimate fallback: embedded JSON
        if [ "$JSON_DOWNLOAD_SUCCESS" = "false" ]; then \
            echo "‚ö†Ô∏è All download methods failed, using embedded fallback JSON..." && \
            echo '{"v1":{"Fedora 40 (SquashFS)":{"DistroMatch":"fedora","DistroVersion":"40","URL":"https://rootfs.fex-emu.gg/Fedora_40/2025-01-08/Fedora_40.sqsh","Hash":"fb51fcd7f086fa19","Type":"squashfs"},"Ubuntu 24.04 (SquashFS)":{"DistroMatch":"ubuntu","DistroVersion":"24.04","URL":"https://rootfs.fex-emu.gg/Ubuntu_24_04/2025-03-04/Ubuntu_24_04.sqsh","Hash":"6d469a5d2bb838ac","Type":"squashfs"},"Ubuntu 22.04 (SquashFS)":{"DistroMatch":"ubuntu","DistroVersion":"22.04","URL":"https://rootfs.fex-emu.gg/Ubuntu_22_04/2025-01-08/Ubuntu_22_04.sqsh","Hash":"73c9269e4c4ca172","Type":"squashfs"}}}' > "$ROOTFS_JSON" && \
            echo "‚úÖ Embedded fallback JSON created" && \
            JSON_DOWNLOAD_SUCCESS=true; \
        fi && \
        \
        # Parse JSON to find matching OS and version
        echo "üîç Searching for ${ROOTFS_OS} ${ROOTFS_VERSION} in RootFS list..." && \
        MATCHED_ENTRY=$(cat "$ROOTFS_JSON" | jq -r --arg os "$ROOTFS_OS" --arg version "$ROOTFS_VERSION" \
            '.v1 | to_entries[] | select(.value.DistroMatch == $os and .value.DistroVersion == $version and .value.Type == "squashfs") | .value') && \
        \
        if [ -n "$MATCHED_ENTRY" ] && [ "$MATCHED_ENTRY" != "null" ]; then \
            ROOTFS_URL=$(echo "$MATCHED_ENTRY" | jq -r '.URL') && \
            ROOTFS_FILENAME=$(basename "$ROOTFS_URL") && \
            ROOTFS_TYPE=$(echo "$MATCHED_ENTRY" | jq -r '.Type') && \
            echo "‚úÖ Found matching RootFS:" && \
            echo "  - URL: $ROOTFS_URL" && \
            echo "  - Filename: $ROOTFS_FILENAME" && \
            echo "  - Type: $ROOTFS_TYPE"; \
        else \
            echo "‚ùå No matching RootFS found for ${ROOTFS_OS} ${ROOTFS_VERSION}" && \
            echo "üìã Available RootFS options:" && \
            cat "$ROOTFS_JSON" | jq -r '.v1 | to_entries[] | "  - \(.value.DistroMatch) \(.value.DistroVersion) (\(.value.Type))"' && \
            exit 1; \
        fi && \
        \
        # Download RootFS file (execute outside if statement)
        echo "üì• Downloading RootFS file: $ROOTFS_FILENAME..." && \
        ROOTFS_LOCAL_PATH="/tmp/$ROOTFS_FILENAME" && \
        FILE_DOWNLOAD_SUCCESS=false && \
        \
        # Try curl first
        echo "üîÑ Attempting file download via curl..." && \
        curl -H 'Cache-Control: no-cache, no-store' -L --progress-bar --connect-timeout 30 --max-time 600 "$ROOTFS_URL" -o "$ROOTFS_LOCAL_PATH" >/dev/null 2>&1 && \
        CURL_FILE_EXIT_CODE=$? && \
        if [ $CURL_FILE_EXIT_CODE -eq 0 ]; then \
            echo "‚úÖ RootFS file downloaded successfully via curl" && \
            FILE_DOWNLOAD_SUCCESS=true; \
        else \
            echo "üîÑ curl failed, trying wget..." && \
            wget --no-cache --no-http-keep-alive -q --timeout=60 --tries=3 --retry-connrefused -O "$ROOTFS_LOCAL_PATH" "$ROOTFS_URL" >/dev/null 2>&1 && \
            WGET_FILE_EXIT_CODE=$? && \
            if [ $WGET_FILE_EXIT_CODE -eq 0 ]; then \
                echo "‚úÖ RootFS file downloaded successfully via wget" && \
                FILE_DOWNLOAD_SUCCESS=true; \
            fi; \
        fi && \
        \
        # Check download success
        if [ "$FILE_DOWNLOAD_SUCCESS" = "false" ]; then \
            echo "‚ùå Failed to download RootFS file with both curl and wget" && \
            exit 1; \
        fi && \
        \
        # Extract RootFS based on file type
        echo "üì¶ Extracting RootFS..." && \
        ROOTFS_DIRNAME="$(echo ${ROOTFS_OS} | sed 's/^./\U&/')_$(echo ${ROOTFS_VERSION} | sed 's/\./_/g')" && \
        EXTRACT_DIR="/home/fex/.fex-emu/RootFS/${ROOTFS_DIRNAME}" && \
        echo "üìã RootFS directory name: $ROOTFS_DIRNAME" && \
        \
        if [ -d "$EXTRACT_DIR" ]; then \
            echo "üóëÔ∏è Removing existing RootFS directory..." && \
            rm -rf "$EXTRACT_DIR"; \
        fi && \
        mkdir -p "$EXTRACT_DIR" && \
        \
        if echo "$ROOTFS_FILENAME" | grep -q '\.sqsh$\|\.squashfs$'; then \
            echo "üîß Extracting SquashFS file using unsquashfs..." && \
            if command -v unsquashfs >/dev/null 2>&1; then \
                cd /tmp && \
                unsquashfs -f -d "$EXTRACT_DIR" "$ROOTFS_LOCAL_PATH" && \
                echo "‚úÖ SquashFS extraction completed"; \
            else \
                echo "‚ùå unsquashfs not found. Installing squashfs-tools..." && \
                apt-get update -qq && apt-get install -y --no-install-recommends squashfs-tools && \
                unsquashfs -f -d "$EXTRACT_DIR" "$ROOTFS_LOCAL_PATH" && \
                echo "‚úÖ SquashFS extraction completed"; \
            fi; \
        elif echo "$ROOTFS_FILENAME" | grep -q '\.ero$\|\.erofs$'; then \
            echo "üîß Extracting EROFS file..." && \
            if ! command -v dump.erofs >/dev/null 2>&1; then \
                echo "üì¶ Installing erofs-utils..." && \
                apt-get update -qq && \
                apt-get install -y --no-install-recommends erofs-utils; \
            fi && \
            dump.erofs --extract="$EXTRACT_DIR" "$ROOTFS_LOCAL_PATH" && \
            echo "‚úÖ EROFS extraction completed"; \
        else \
            echo "‚ùå Unknown RootFS file format: $ROOTFS_FILENAME" && \
            exit 1; \
        fi && \
        \
        # Create FEX configuration with correct format
        echo "‚öôÔ∏è Writing FEX configuration..." && \
        CONFIG_PATH="/home/fex/.fex-emu/Config.json" && \
        printf '{"Config":{"RootFS":"%s"},"ThunksDB":{}}' "$ROOTFS_DIRNAME" > "$CONFIG_PATH" && \
        echo "‚úÖ FEX configuration written to $CONFIG_PATH" && \
        \
        # Set proper ownership for manual setup
        chown -R fex:fex /home/fex/.fex-emu && \
        \
        # Verify manual installation
        echo "üîç Verifying manual RootFS installation..." && \
        if [ -d "$EXTRACT_DIR" ]; then \
            ROOTFS_CONTENT_COUNT=$(find "$EXTRACT_DIR" -type f | wc -l) && \
            echo "üìä Manual RootFS verification results:" && \
            echo "  - Directory: $EXTRACT_DIR" && \
            echo "  - Files: $ROOTFS_CONTENT_COUNT" && \
            \
            if [ "$ROOTFS_CONTENT_COUNT" -gt 100 ]; then \
                echo "‚úÖ Manual RootFS appears to be properly extracted"; \
            else \
                echo "‚ö†Ô∏è Manual RootFS may be incomplete (too few files)"; \
            fi; \
        else \
            echo "‚ùå Manual RootFS directory not found after extraction" && \
            exit 1; \
        fi && \
        \
        # Cleanup temporary files
        echo "üßπ Cleaning up manual setup temporary files..." && \
        rm -f "$ROOTFS_LOCAL_PATH" "$ROOTFS_JSON" && \
        \
        echo "üéâ Manual RootFS setup completed successfully as fallback!"; \
    else \
        echo "üéâ FEXRootFSFetcher setup completed successfully!" && \
        # Set proper ownership for FEXRootFSFetcher result
        chown -R fex:fex /home/fex/.fex-emu; \
    fi && \
    \
    # Final verification for both methods
    echo "üîß Final RootFS verification..." && \
    if [ -d "/home/fex/.fex-emu/RootFS" ]; then \
        ROOTFS_COUNT=$(find /home/fex/.fex-emu/RootFS -maxdepth 1 -type d | wc -l) && \
        ROOTFS_FILES=$(find /home/fex/.fex-emu/RootFS -type f | wc -l) && \
        echo "üìä Final RootFS verification:" && \
        echo "  - RootFS directories: $ROOTFS_COUNT" && \
        echo "  - RootFS files: $ROOTFS_FILES" && \
        echo "  - Method used: $([ "$FEXROOTFS_SUCCESS" = "true" ] && echo "FEXRootFSFetcher (primary)" || echo "Manual setup (fallback)")" && \
        \
        if [ "$ROOTFS_FILES" -gt 0 ]; then \
            echo "‚úÖ Final RootFS verification passed"; \
        else \
            echo "‚ùå Final RootFS verification failed - no files found" && \
            exit 1; \
        fi; \
    else \
        echo "‚ùå RootFS directory not found" && \
        exit 1; \
    fi && \
    \
    # Cleanup downloaded artifacts but keep RootFS
    echo "üßπ Cleaning up temporary RootFS artifacts..." && \
    find /home/fex/.fex-emu/RootFS -name "*.sqsh" -delete 2>/dev/null || true && \
    find /home/fex/.fex-emu/RootFS -name "*.ero" -delete 2>/dev/null || true && \
    echo "üíæ Final RootFS size: $(du -sh /home/fex/.fex-emu/ 2>/dev/null || echo 'unknown')" && \
    echo "üéâ RootFS setup completed successfully!"

# Switch to fex user
USER fex
WORKDIR /home/fex

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["/bin/bash"]
