ARG BASE_IMAGE=ubuntu:24.04

#==============================================
# Runtime Stage - Ubuntu & Fedora Support
#==============================================
FROM ${BASE_IMAGE} AS runtime

ARG TARGETPLATFORM 
ARG ROOTFS_OS=ubuntu
ARG ROOTFS_VERSION="24.04"
ARG ROOTFS_TYPE=squashfs

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive 
ENV TZ=Asia/Seoul

# Detect OS type for runtime
RUN echo "🔍 Starting runtime OS detection..." && \
    if [ -f /etc/redhat-release ] || [ -f /etc/fedora-release ]; then \
        echo "🐧 Runtime: Detected Fedora/RHEL distribution" && \
        echo "DISTRO_TYPE=fedora" > /etc/distro-info; \
    elif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then \
        echo "🐧 Runtime: Detected Debian/Ubuntu distribution" && \
        echo "DISTRO_TYPE=debian" > /etc/distro-info && \
        export DEBIAN_FRONTEND=noninteractive && \
        ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
        echo $TZ > /etc/timezone; \
    else \
        echo "❌ Runtime: Unknown distribution type" && \
        echo "DISTRO_TYPE=unknown" > /etc/distro-info; \
    fi && \
    echo "✅ Runtime OS detection completed"

# Install runtime dependencies (simplified)
RUN echo "📦 Starting runtime dependencies installation..." && \
    . /etc/distro-info && \
    echo "📊 Runtime build parameters:" && \
    echo "  - ROOTFS_OS: ${ROOTFS_OS}" && \
    echo "  - ROOTFS_VERSION: ${ROOTFS_VERSION}" && \
    echo "  - ROOTFS_TYPE: ${ROOTFS_TYPE}" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        echo "🔧 Setting up Debian/Ubuntu runtime environment..." && \
        apt-get update -qq && \
        echo "📦 Installing minimal runtime packages..." && \
        apt-get install -qq -y --no-install-recommends \
            squashfs-tools squashfuse sudo curl wget jq \
            libstdc++6 libc6 && \
        echo "✅ Runtime packages installed" && \
        \
        # Cleanup for size optimization
        echo "🧹 Performing cleanup for size optimization..." && \
        apt-get autoremove -y && \
        apt-get autoclean && \
        rm -rf /var/lib/apt/lists/* /var/tmp/* /var/cache/* && \
        echo "✅ Debian/Ubuntu runtime setup completed successfully"; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        echo "🔧 Setting up Fedora runtime environment..." && \
        echo "📦 Installing minimal Fedora runtime packages..." && \
        dnf install -q -y --setopt=install_weak_deps=False \
            squashfs-tools squashfuse erofs-fuse erofs-utils curl wget jq \
            sudo util-linux-core libstdc++ glibc && \
        echo "✅ Fedora runtime packages installed" && \
        echo "🧹 Cleaning up Fedora package cache..." && \
        dnf clean all -q && \
        rm -rf /var/cache/dnf /var/tmp/* && \
        echo "✅ Fedora runtime setup completed successfully"; \
    else \
        echo "❌ Unsupported distribution type for runtime" && exit 1; \
    fi && \
    echo "🎉 Runtime dependencies installation completed!"

# Copy FEX binaries from build stage and optimize
COPY --from=fex-builder /usr/local/fex /usr/local/fex
RUN echo "✅ FEX binaries copied successfully" && \
    echo "📊 FEX installation summary:" && \
    ls -la /usr/local/fex/bin/ && \
    echo "🔧 Optimizing FEX binaries..." && \
    strip /usr/local/fex/bin/* 2>/dev/null || true && \
    find /usr/local/fex -name "*.so*" -exec strip --strip-unneeded {} + 2>/dev/null || true && \
    echo "✅ FEX binary optimization completed"
ENV PATH="/usr/local/fex/bin:$PATH"
 
# Setup RootFS using FEXRootFSFetcher with enhanced error handling
RUN echo "🚀 Starting RootFS setup process..." && \
    echo "📊 RootFS configuration:" && \
    echo "  - Target OS: ${ROOTFS_OS}" && \
    echo "  - Target Version: ${ROOTFS_VERSION}" && \
    echo "  - RootFS Type: ${ROOTFS_TYPE}" && \
    \
    # Check network connectivity first
    echo "🔍 Checking network connectivity..." && \
    if curl -H 'Cache-Control: no-cache, no-store' -s --connect-timeout 10 https://rootfs.fex-emu.gg/RootFS_links.json >/dev/null 2>&1; then \
        echo "✅ FEX RootFS server reachable"; \
    else \
        echo "⚠️ FEX RootFS server unreachable, will try anyway"; \
        # Manual RootFS setup script (FEXRootFSFetcher alternative)
        echo "🔄 Starting manual RootFS setup as FEXRootFSFetcher alternative..." && \
        \
        # Create necessary directories
        mkdir -p /home/fex/.fex-emu/RootFS && \
        \
        # Download RootFS JSON list (search result [1] pattern)
        echo "📥 Downloading RootFS links from FEX server..." && \
        ROOTFS_JSON_URL="https://rootfs.fex-emu.gg/RootFS_links.json" && \
        ROOTFS_JSON="/tmp/rootfs_links.json" && \
        \
        if wget --no-cache --no-http-keep-alive -q --debug --verbose -O "$ROOTFS_JSON" "$ROOTFS_JSON_URL"; then \
            echo "✅ RootFS JSON downloaded successfully"; \
        else \
            echo "⚠️ Both curl and wget failed, using embedded fallback JSON..." && \
            echo '{"v1":{"Fedora 40 (SquashFS)":{"DistroMatch":"fedora","DistroVersion":"40","URL":"https://rootfs.fex-emu.gg/Fedora_40/2025-01-08/Fedora_40.sqsh","Hash":"fb51fcd7f086fa19","Type":"squashfs"},"Ubuntu 24.04 (SquashFS)":{"DistroMatch":"ubuntu","DistroVersion":"24.04","URL":"https://rootfs.fex-emu.gg/Ubuntu_24_04/2025-03-04/Ubuntu_24_04.sqsh","Hash":"6d469a5d2bb838ac","Type":"squashfs"},"Ubuntu 22.04 (SquashFS)":{"DistroMatch":"ubuntu","DistroVersion":"22.04","URL":"https://rootfs.fex-emu.gg/Ubuntu_22_04/2025-01-08/Ubuntu_22_04.sqsh","Hash":"73c9269e4c4ca172","Type":"squashfs"}}}' > "$ROOTFS_JSON" && \
            echo "✅ Embedded fallback JSON created (compressed format)"; \
        fi && \
        \
        # Parse JSON to find matching OS and version (search result [1] logic)
        echo "🔍 Searching for ${ROOTFS_OS} ${ROOTFS_VERSION} in RootFS list..." && \
        ROOTFS_URL="" && \
        ROOTFS_FILENAME="" && \
        ROOTFS_TYPE="" && \
        \
        # Extract matching entry from JSON using jq
        MATCHED_ENTRY=$(cat "$ROOTFS_JSON" | jq -r --arg os "$ROOTFS_OS" --arg version "$ROOTFS_VERSION" \
            '.v1 | to_entries[] | select(.value.DistroMatch == $os and .value.DistroVersion == $version and .value.Type == "squashfs") | .value') && \
        \
        if [ -n "$MATCHED_ENTRY" ] && [ "$MATCHED_ENTRY" != "null" ]; then \
            ROOTFS_URL=$(echo "$MATCHED_ENTRY" | jq -r '.URL') && \
            ROOTFS_FILENAME=$(basename "$ROOTFS_URL") && \
            ROOTFS_TYPE=$(echo "$MATCHED_ENTRY" | jq -r '.Type') && \
            echo "✅ Found matching RootFS:" && \
            echo "  - URL: $ROOTFS_URL" && \
            echo "  - Filename: $ROOTFS_FILENAME" && \
            echo "  - Type: $ROOTFS_TYPE"; \
        else \
            echo "❌ No matching RootFS found for ${ROOTFS_OS} ${ROOTFS_VERSION}" && \
            echo "📋 Available RootFS options:" && \
            cat "$ROOTFS_JSON" | jq -r '.v1 | to_entries[] | "  - \(.value.DistroMatch) \(.value.DistroVersion) (\(.value.Type))"' && \
            exit 1; \
        fi && \
        \
        # Download RootFS file (search result [4] pattern)
        echo "📥 Downloading RootFS file: $ROOTFS_FILENAME..." && \
        ROOTFS_LOCAL_PATH="/tmp/$ROOTFS_FILENAME" && \
        FILE_DOWNLOAD_SUCCESS=false && \
        \
        # Try curl first (supports progress bar and resume)
        if curl -H 'Cache-Control: no-cache, no-store' -L --progress-bar --connect-timeout 30 --max-time 600  "$ROOTFS_URL" -o "$ROOTFS_LOCAL_PATH" 2>/dev/null; then \
            echo "✅ RootFS file downloaded successfully via curl" && \
            FILE_DOWNLOAD_SUCCESS=true; \
        # Fallback to wget (different retry logic and network handling)
        elif wget --no-cache --no-http-keep-alive -q --timeout=60 --tries=3 --retry-connrefused -O "$ROOTFS_LOCAL_PATH" "$ROOTFS_URL" 2>/dev/null; then \
            echo "✅ RootFS file downloaded successfully via wget" && \
            FILE_DOWNLOAD_SUCCESS=true; \
        else \
            echo "❌ Failed to download RootFS file with both curl and wget" && \
            exit 1; \
        fi && \
        \
        # Extract RootFS based on file type (search result [1] and [2] logic)
        echo "📦 Extracting RootFS..." && \
        # Proper RootFS directory naming (Ubuntu_24_04 style)
        ROOTFS_DIRNAME="$(echo ${ROOTFS_OS} | sed 's/^./\U&/')_$(echo ${ROOTFS_VERSION} | sed 's/\./_/g')" && \
        EXTRACT_DIR="/home/fex/.fex-emu/RootFS/${ROOTFS_DIRNAME}" && \
        echo "📋 RootFS directory name: $ROOTFS_DIRNAME" && \
        \
        if [ -d "$EXTRACT_DIR" ]; then \
            echo "🗑️ Removing existing RootFS directory..." && \
            rm -rf "$EXTRACT_DIR"; \
        fi && \
        mkdir -p "$EXTRACT_DIR" && \
        \
        if echo "$ROOTFS_FILENAME" | grep -q '\.sqsh$\|\.squashfs$'; then \
            echo "🔧 Extracting SquashFS file using unsquashfs..." && \
            # Use unsquashfs to extract (search result [2] method)
            if command -v unsquashfs >/dev/null 2>&1; then \
                cd /tmp && \
                unsquashfs -f -d "$EXTRACT_DIR" "$ROOTFS_LOCAL_PATH" && \
                echo "✅ SquashFS extraction completed"; \
            else \
                echo "❌ unsquashfs not found. Installing squashfs-tools..." && \
                apt-get update -qq && apt-get install -y --no-install-recommends squashfs-tools && \
                unsquashfs -f -d "$EXTRACT_DIR" "$ROOTFS_LOCAL_PATH" && \
                echo "✅ SquashFS extraction completed"; \
            fi; \
        elif echo "$ROOTFS_FILENAME" | grep -q '\.ero$\|\.erofs$'; then \
            echo "🔧 Extracting EROFS file..." && \
            # Install erofs-utils if needed
            if ! command -v dump.erofs >/dev/null 2>&1; then \
                echo "📦 Installing erofs-utils..." && \
                apt-get update -qq && \
                apt-get install -y --no-install-recommends erofs-utils; \
            fi && \
            \
            # Extract EROFS using dump.erofs
            if dump.erofs --extract="$EXTRACT_DIR" "$ROOTFS_LOCAL_PATH"; then \
                echo "✅ EROFS extraction completed"; \
            else \
                echo "❌ EROFS extraction failed" && \
                exit 1; \
            fi; \
        fi; \
        \
        # Set proper ownership (search result [2] requirement)
        chown -R fex:fex /home/fex/.fex-emu && \
        \
        # Create FEX configuration with correct format (printf version for readability)
        echo "⚙️ Writing FEX configuration..." && \
        CONFIG_PATH="/home/fex/.fex-emu/Config.json" && \
        \
        # Create config JSON using printf (formatted)
        printf '{"Config":{"RootFS":"%s"},"ThunksDB":{}}' "$ROOTFS_DIRNAME" > "$CONFIG_PATH" && \
        \
        chown fex:fex "$CONFIG_PATH" && \
        echo "✅ FEX configuration written to $CONFIG_PATH" && \
        \
        # Verify config format (NEW)
        echo "🔍 Verifying configuration format:" && \
        cat "$CONFIG_PATH" | jq . && \
        \
        # Verify installation (search result [2] verification)
        echo "🔍 Verifying RootFS installation..." && \
        if [ -d "$EXTRACT_DIR" ]; then \
            ROOTFS_CONTENT_COUNT=$(find "$EXTRACT_DIR" -type f | wc -l) && \
            ROOTFS_DIR_COUNT=$(find "$EXTRACT_DIR" -type d | wc -l) && \
            echo "📊 RootFS verification results:" && \
            echo "  - Directory: $EXTRACT_DIR" && \
            echo "  - Files: $ROOTFS_CONTENT_COUNT" && \
            echo "  - Directories: $ROOTFS_DIR_COUNT" && \
            \
            if [ "$ROOTFS_CONTENT_COUNT" -gt 100 ]; then \
                echo "✅ RootFS appears to be properly extracted"; \
            else \
                echo "⚠️ RootFS may be incomplete (too few files)"; \
            fi; \
        else \
            echo "❌ RootFS directory not found after extraction" && \
            exit 1; \
        fi && \
        \
        # Cleanup temporary files
        echo "🧹 Cleaning up temporary files..." && \
        rm -f "$ROOTFS_LOCAL_PATH" "$ROOTFS_JSON" && \
        \
        # Final verification with config
        echo "🎯 Final verification..." && \
        echo "📋 RootFS setup summary:" && \
        echo "  - OS: ${ROOTFS_OS}" && \
        echo "  - Version: ${ROOTFS_VERSION}" && \
        echo "  - Type: $ROOTFS_TYPE" && \
        echo "  - Directory Name: $ROOTFS_DIRNAME" && \
        echo "  - Location: $EXTRACT_DIR" && \
        echo "  - Config: $CONFIG_PATH" && \
        echo "  - Size: $(du -sh "$EXTRACT_DIR" 2>/dev/null | cut -f1)" && \
        \
        # Display final config content
        echo "📋 Final Config.json content:" && \
        cat "$CONFIG_PATH" && \
        \
        ROOTFS_SUCCESS=true && echo "🎉 Manual RootFS setup completed successfully!"; \
    fi && \
    \
    # Enhanced FEXRootFSFetcher with retry logic
    echo "📥 Starting RootFS download with retry logic..." && \
    ROOTFS_SUCCESS=false && \
    for attempt in 1 2 3; do \
        echo "⏳ RootFS download attempt $attempt/3..." && \
        if timeout 300 FEXRootFSFetcher -yx --distro-name=${ROOTFS_OS} --distro-version=${ROOTFS_VERSION} --force-ui=tty; then \
            echo "✅ RootFS download completed successfully (attempt $attempt)"; \
            ROOTFS_SUCCESS=true && \
            break; \
        else \
            echo "❌ RootFS download failed (attempt $attempt)"; \
            if [ $attempt -lt 3 ]; then \
                echo "⏳ Waiting 30 seconds before retry..."; \
                sleep 30; \
            fi; \
        fi; \
    done && \
    \
    # Check if RootFS was successfully downloaded
    if [ "$ROOTFS_SUCCESS" = "true" ]; then \
        echo "🎉 RootFS download and extraction completed successfully"; \
    else \
        echo "❌ All RootFS download attempts failed"; \
        echo "🔍 Checking for existing RootFS files..."; \
        if [ -d "/home/fex/.fex-emu/RootFS" ] && [ "$(find /home/fex/.fex-emu/RootFS -type f | wc -l)" -gt 0 ]; then \
            echo "✅ Found existing RootFS files, proceeding with build"; \
        else \
            echo "❌ No RootFS files found. Manual intervention required."; \
            echo "💡 Troubleshooting steps:"; \
            echo "  1. Check network connectivity to rootfs.fex-emu.gg"; \
            echo "  2. Verify RootFS API is accessible"; \
            echo "  3. Consider using manual RootFS download"; \
            exit 1; \
        fi; \
    fi && \
    \
    # Verify RootFS installation
    echo "🔧 Verifying RootFS installation..." && \
    if [ -d "/home/fex/.fex-emu/RootFS" ]; then \
        ROOTFS_COUNT=$(find /home/fex/.fex-emu/RootFS -maxdepth 1 -type d | wc -l) && \
        ROOTFS_FILES=$(find /home/fex/.fex-emu/RootFS -type f | wc -l) && \
        echo "📊 RootFS verification:" && \
        echo "  - RootFS directories: $ROOTFS_COUNT" && \
        echo "  - RootFS files: $ROOTFS_FILES" && \
        \
        if [ "$ROOTFS_FILES" -gt 0 ]; then \
            echo "✅ RootFS verification passed"; \
        else \
            echo "❌ RootFS verification failed - no files found"; \
            exit 1; \
        fi; \
    else \
        echo "❌ RootFS directory not found"; \
        exit 1; \
    fi && \
    \
    # Configure RootFS permissions
    echo "🔧 Configuring RootFS permissions..." && \
    chown -R fex:fex /home/fex/.fex-emu && \
    echo "✅ RootFS permissions configured" && \
    \
    # Cleanup downloaded artifacts but keep RootFS
    echo "🧹 Cleaning up temporary RootFS artifacts..." && \
    find /home/fex/.fex-emu/RootFS -name "*.sqsh" -delete 2>/dev/null || true && \
    find /home/fex/.fex-emu/RootFS -name "*.ero" -delete 2>/dev/null || true && \
    echo "💾 Final RootFS size: $(du -sh /home/fex/.fex-emu/ 2>/dev/null || echo 'unknown')" && \
    echo "🎉 RootFS setup completed successfully!"

# Create user with OS-specific configuration
RUN echo "👤 Starting user creation and configuration..." && \
    . /etc/distro-info && \
    useradd -m -s /bin/bash fex && \
    echo "✅ User 'fex' created successfully" && \
    if [ "$DISTRO_TYPE" = "debian" ]; then \
        usermod -aG sudo fex; \
    elif [ "$DISTRO_TYPE" = "fedora" ]; then \
        usermod -aG wheel fex; \
    fi && \
    echo "fex ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/fex && \
    chown -R fex:fex /home/fex && \
    echo "✅ All setup completed, ready to switch user"

USER fex
WORKDIR /home/fex

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["/bin/bash"]
